// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Ana
#include <Ana.h>
#endif
#ifndef INCLUDED_Analysis
#include <Analysis.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GameplayCustomizeState
#include <GameplayCustomizeState.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_GlobalVideo
#include <GlobalVideo.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_LuaCamera
#include <LuaCamera.h>
#endif
#ifndef INCLUDED_LuaCharacter
#include <LuaCharacter.h>
#endif
#ifndef INCLUDED_LuaClass
#include <LuaClass.h>
#endif
#ifndef INCLUDED_LuaNote
#include <LuaNote.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_ResultsScreen
#include <ResultsScreen.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StageDebugState
#include <StageDebugState.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_WaveformTestState
#include <WaveformTestState.h>
#endif
#ifndef INCLUDED_WebmHandler
#include <WebmHandler.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_webm_WebmPlayer
#include <webm/WebmPlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_86_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",86,0xb30d7781)
static const bool _hx_array_data_46c2835d_1[] = {
	0,0,0,0,
};
static const ::String _hx_array_data_46c2835d_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_296_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",296,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_301_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",301,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_305_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",305,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1010_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1010,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1003_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1003,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_994_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",994,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1025_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1025,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1033_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1033,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1075_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1075,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1093_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1093,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1108_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1108,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1103_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1103,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1113_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1048_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1048,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1160_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1160,0xb30d7781)
static const ::String _hx_array_data_46c2835d_34[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_35[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1207_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1224_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1224,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1243_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1243,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1140_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1140,0xb30d7781)
static const int _hx_array_data_46c2835d_40[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1258_getKey,"PlayState","getKey",0xa9336b9a,"PlayState.getKey","PlayState.hx",1258,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1270_releaseInput,"PlayState","releaseInput",0xa075d074,"PlayState.releaseInput","PlayState.hx",1270,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1367_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1367,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1371_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1371,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1310_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1310,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1438_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1438,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1549_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1549,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1747_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1747,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1752_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1752,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1852_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1852,0xb30d7781)
static const int _hx_array_data_46c2835d_67[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_68[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_69[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_70[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_71[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_72[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_73[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_74[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1863_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",1863,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1860_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",1860,0xb30d7781)
static const int _hx_array_data_46c2835d_77[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1874_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",1874,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1878_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1878,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1911_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1911,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1966_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1966,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2021_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2021,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2094_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2094,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2516_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2516,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2893_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2893,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3002_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3002,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3036_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3036,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3240_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3260_getSectionByTime,"PlayState","getSectionByTime",0x77354304,"PlayState.getSectionByTime","PlayState.hx",3260,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3279_recalculateAllSectionTimes,"PlayState","recalculateAllSectionTimes",0x34e3dfc0,"PlayState.recalculateAllSectionTimes","PlayState.hx",3279,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3301_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3301,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3355_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3355,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3404_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3404,0xb30d7781)
static const ::String _hx_array_data_46c2835d_111[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3479_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3479,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3497_getRatesScore,"PlayState","getRatesScore",0xf8894024,"PlayState.getRatesScore","PlayState.hx",3497,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3521_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3521,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3802_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3802,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3811_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3811,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3766_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3766,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3772_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3772,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3830_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",3830,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4032_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4032,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3841_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3841,0xb30d7781)
static const ::String _hx_array_data_46c2835d_138[] = {
	HX_("left",07,08,b0,47),HX_("down",62,f8,6d,42),HX_("up",5b,66,00,00),HX_("right",dc,0b,64,e9),
};
static const bool _hx_array_data_46c2835d_139[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_140[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_141[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3887_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3887,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3908_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3908,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3946_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3946,0xb30d7781)
static const bool _hx_array_data_46c2835d_145[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_146[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4000_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4000,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4051_findByTime,"PlayState","findByTime",0xc7b7b00e,"PlayState.findByTime","PlayState.hx",4051,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4062_findByTimeIndex,"PlayState","findByTimeIndex",0x9aab6824,"PlayState.findByTimeIndex","PlayState.hx",4062,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4082_backgroundVideo,"PlayState","backgroundVideo",0x865a229c,"PlayState.backgroundVideo","PlayState.hx",4082,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4138_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4138,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4229_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",4229,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4244_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4244,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4247_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4247,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4239_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4239,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4261_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",4261,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4307_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4307,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4370_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4370,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4391_pressArrow,"PlayState","pressArrow",0x8f0070b7,"PlayState.pressArrow","PlayState.hx",4391,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4408_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4408,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4425_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4425,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4430_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4430,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4522_poggers,"PlayState","poggers",0x6fe9ecd6,"PlayState.poggers","PlayState.hx",4522,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_88_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",88,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_91_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",91,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_92_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",92,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_93_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",93,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_94_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",94,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_95_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",95,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_96_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",96,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_97_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",97,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_98_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",98,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_99_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",99,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_100_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_117_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",117,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_118_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",118,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_120_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",120,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_122_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",122,0xb30d7781)
static const bool _hx_array_data_46c2835d_193[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_137_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_162_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",162,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_163_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",163,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_164_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",164,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_175_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",175,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_176_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",176,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_177_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",177,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_178_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",178,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_179_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",179,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_180_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",180,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_207_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_233_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",233,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_247_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",247,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_249_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",249,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_255_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",255,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_263_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",263,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_264_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",264,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_266_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",266,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_267_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",267,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_273_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",273,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_282_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",282,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_290_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",290,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1136_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1136,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1431_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1431,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_86_new)
HXLINE(4405)		this->danced = false;
HXLINE(4258)		this->etternaModeScore = 0;
HXLINE(4256)		this->mashViolations = 0;
HXLINE(4255)		this->mashing = 0;
HXLINE(4077)		this->playingDathing = false;
HXLINE(4073)		this->useVideo = false;
HXLINE(4072)		this->fuckingVolume = ((Float)1);
HXLINE(3836)		this->leftHold = false;
HXLINE(3835)		this->rightHold = false;
HXLINE(3834)		this->downHold = false;
HXLINE(3833)		this->upHold = false;
HXLINE(3518)		this->currentTimingShown = null();
HXLINE(3517)		this->timeShown = 0;
HXLINE(3494)		this->offsetTest = ((Float)0);
HXLINE(3493)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(3491)		this->endingSong = false;
HXLINE(2018)		this->currentLuaIndex = 0;
HXLINE(2016)		this->pastScrollChanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2014)		this->updateFrame = 0;
HXLINE(2012)		this->currentBPM = 0;
HXLINE(2010)		this->removedVideo = false;
HXLINE(2009)		this->stopUpdate = false;
HXLINE(2007)		this->maxNPS = 0;
HXLINE(2006)		this->nps = 0;
HXLINE(2005)		this->canPause = true;
HXLINE(2004)		this->startedCountdown = false;
HXLINE(2002)		this->paused = false;
HXLINE(1546)		this->debugNum = 0;
HXLINE(1435)		this->previousRate = ::PlayState_obj::songMultiplier;
HXLINE(1429)		this->doAnything = false;
HXLINE(1427)		this->songStarted = false;
HXLINE(1307)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1267)		this->keys = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_1,4);
HXLINE(1255)		this->songTime = ((Float)0);
HXLINE(1254)		this->lastReportedPlayheadPosition = 0;
HXLINE(1253)		this->previousFrameTime = 0;
HXLINE(1133)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1132)		this->perfectMode = false;
HXLINE( 288)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_2,4);
HXLINE( 287)		this->dataSuffix = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,4);
HXLINE( 284)		this->executeModchart = false;
HXLINE( 280)		this->replayAna =  ::Analysis_obj::__alloc( HX_CTX );
HXLINE( 279)		this->saveJudge = ::Array_obj< ::String >::__new(0);
HXLINE( 278)		this->saveNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 270)		this->triggeredAlready = false;
HXLINE( 259)		this->randomVar = false;
HXLINE( 253)		this->usedTimeTravel = false;
HXLINE( 252)		this->inCutscene = false;
HXLINE( 243)		this->skipActive = false;
HXLINE( 242)		this->needSkip = false;
HXLINE( 237)		this->songScoreDef = 0;
HXLINE( 235)		this->songScore = 0;
HXLINE( 231)		this->talking = true;
HXLINE( 229)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 227)		this->fc = true;
HXLINE( 223)		this->altSuffix = HX_("",00,00,00,00);
HXLINE( 219)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,2);
HXLINE( 217)		this->allowedToCheer = false;
HXLINE( 216)		this->allowedToHeadbang = true;
HXLINE( 215)		this->forcedToIdle = false;
HXLINE( 214)		this->idleBeat = 2;
HXLINE( 213)		this->idleToBeat = true;
HXLINE( 212)		this->currentFrames = 0;
HXLINE( 211)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 209)		this->isSMFile = false;
HXLINE( 205)		this->cannotDie = false;
HXLINE( 195)		this->startingSong = false;
HXLINE( 194)		this->generatedMusic = false;
HXLINE( 192)		this->songPositionBar = ((Float)0);
HXLINE( 188)		this->ss = false;
HXLINE( 187)		this->totalPlayed = 0;
HXLINE( 186)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 185)		this->totalNotesHit = ((Float)0);
HXLINE( 184)		this->accuracyDefault = ((Float)0.00);
HXLINE( 182)		this->accuracy = ((Float)0.00);
HXLINE( 173)		this->combo = 0;
HXLINE( 171)		this->health = ((Float)1);
HXLINE( 169)		this->gfSpeed = 1;
HXLINE( 167)		this->curSong = HX_("",00,00,00,00);
HXLINE( 166)		this->camZooming = false;
HXLINE( 153)		this->curSection = 0;
HXLINE( 149)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 132)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 131)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 130)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 129)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 124)		this->songLength = ((Float)0);
HXLINE( 108)		this->visibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 106)		this->addedBotplay = false;
HXLINE( 104)		this->visibleCombos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  86)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_296_addObject)
HXDLIN( 296)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_301_removeObject)
HXDLIN( 301)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_305_create)
HXLINE( 304)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 306)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 307)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 310)		::GameplayCustomizeState_obj::freeplayBf = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
HXLINE( 311)		::GameplayCustomizeState_obj::freeplayDad = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 312)		::GameplayCustomizeState_obj::freeplayGf = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
HXLINE( 313)		::GameplayCustomizeState_obj::freeplayNoteStyle = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
HXLINE( 314)		::GameplayCustomizeState_obj::freeplayStage = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 315)		::GameplayCustomizeState_obj::freeplaySong = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE( 316)		::GameplayCustomizeState_obj::freeplayWeek = ::PlayState_obj::storyWeek;
HXLINE( 318)		this->previousRate = (::PlayState_obj::songMultiplier - ((Float)0.05));
HXLINE( 320)		if ((this->previousRate < ((Float)1.00))) {
HXLINE( 321)			this->previousRate = ( (Float)(1) );
            		}
HXLINE( 323)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 324)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 326)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 327)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 327)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 329)		::PlayState_obj::inDaPlay = true;
HXLINE( 331)		if (::hx::IsNotEq( ::PlayState_obj::currentSong,::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) )) {
HXLINE( 333)			::PlayState_obj::currentSong = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) );
HXLINE( 334)			::Main_obj::dumpCache();
            		}
HXLINE( 337)		::PlayState_obj::sicks = 0;
HXLINE( 338)		::PlayState_obj::bads = 0;
HXLINE( 339)		::PlayState_obj::shits = 0;
HXLINE( 340)		::PlayState_obj::goods = 0;
HXLINE( 342)		::PlayState_obj::misses = 0;
HXLINE( 344)		::PlayState_obj::highestCombo = 0;
HXLINE( 345)		::PlayState_obj::repPresses = 0;
HXLINE( 346)		::PlayState_obj::repReleases = 0;
HXLINE( 347)		::PlayState_obj::inResults = false;
HXLINE( 349)		::PlayStateChangeables_obj::useDownscroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
HXLINE( 350)		::PlayStateChangeables_obj::safeFrames = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXLINE( 351)		::PlayStateChangeables_obj::scrollSpeed = (( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) ) * ::PlayState_obj::songMultiplier);
HXLINE( 352)		::PlayStateChangeables_obj::botPlay = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
HXLINE( 353)		::PlayStateChangeables_obj::Optimize = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) );
HXLINE( 354)		::PlayStateChangeables_obj::zoom = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXLINE( 356)		this->removedVideo = false;
HXLINE( 360)		::String library = null();
HXDLIN( 360)		this->executeModchart = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(( (::String)(((HX_("data/",c5,0e,88,d4) + ((HX_("songs/",71,e7,88,2d) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e))) ),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 361)		if (::PlayState_obj::isSM) {
HXLINE( 362)			this->executeModchart = ::sys::FileSystem_obj::exists((::PlayState_obj::pathToSm + HX_("/modchart.lua",d5,99,c0,d9)));
            		}
HXLINE( 363)		if (this->executeModchart) {
HXLINE( 364)			::PlayStateChangeables_obj::Optimize = false;
            		}
HXLINE( 370)		{
HXLINE( 370)			::String input = ((HX_("Searching for mod chart? (",04,61,ee,a6) + ::Std_obj::string(this->executeModchart)) + HX_(") at ",56,9c,de,b0));
HXDLIN( 370)			::String library1 = null();
HXDLIN( 370)			 ::Dynamic input1 = (input + ::Paths_obj::getPath(( (::String)(((HX_("data/",c5,0e,88,d4) + ((HX_("songs/",71,e7,88,2d) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e))) ),HX_("TEXT",ad,94,ba,37),library1));
HXDLIN( 370)			if (::hx::IsNotNull( input1 )) {
HXLINE( 370)				::cpp::VirtualArray output = ::Debug_obj::formatOutput(input1,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),370,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXDLIN( 370)				::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 370)				::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            			}
            		}
HXLINE( 372)		if (this->executeModchart) {
HXLINE( 373)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 377)		this->storyDifficultyText = ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty);
HXLINE( 379)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 382)		::String _hx_switch_0 = this->iconRPC;
            		if (  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 389)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 389)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 387)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 387)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 385)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 385)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 393)		if (::PlayState_obj::isStoryMode) {
HXLINE( 395)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 399)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 403)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 406)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN( 406)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE( 413)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE( 406)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE( 422)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 423)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 424)		{
HXLINE( 424)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 424)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor & 16777215);
HXDLIN( 424)			 ::flixel::FlxCamera _hx_tmp4 = this->camHUD;
HXDLIN( 424)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor | 0);
            		}
HXLINE( 425)		this->camSustains =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 426)		{
HXLINE( 426)			 ::flixel::FlxCamera _hx_tmp5 = this->camSustains;
HXDLIN( 426)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor & 16777215);
HXDLIN( 426)			 ::flixel::FlxCamera _hx_tmp6 = this->camSustains;
HXDLIN( 426)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor | 0);
            		}
HXLINE( 427)		this->camNotes =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 428)		{
HXLINE( 428)			 ::flixel::FlxCamera _hx_tmp7 = this->camNotes;
HXDLIN( 428)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor & 16777215);
HXDLIN( 428)			 ::flixel::FlxCamera _hx_tmp8 = this->camNotes;
HXDLIN( 428)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor | 0);
            		}
HXLINE( 430)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 431)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 432)		::flixel::FlxG_obj::cameras->add(this->camSustains,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 433)		::flixel::FlxG_obj::cameras->add(this->camNotes,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 435)		this->camHUD->set_zoom(::PlayStateChangeables_obj::zoom);
HXLINE( 437)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 439)		this->persistentUpdate = true;
HXLINE( 440)		this->persistentDraw = true;
HXLINE( 442)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 443)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),HX_("",00,00,00,00));
            		}
HXLINE( 445)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 446)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 448)		::Conductor_obj::bpm = ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 450)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 452)			::PlayState_obj::SONG->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 455)		::TimingStruct_obj::clearTimings();
HXLINE( 457)		int currentIndex = 0;
HXLINE( 458)		{
HXLINE( 458)			int _g = 0;
HXDLIN( 458)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 458)			while((_g < _g1->length)){
HXLINE( 458)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 458)				_g = (_g + 1);
HXLINE( 460)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 462)					Float beat = i->position;
HXLINE( 464)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 466)					Float bpm = (i->value * ::PlayState_obj::songMultiplier);
HXLINE( 468)					::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE( 470)					if ((currentIndex != 0)) {
HXLINE( 472)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 473)						data->endBeat = beat;
HXLINE( 474)						data->length = (((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) ))) / ::PlayState_obj::songMultiplier);
HXLINE( 475)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 476)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor(((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step) / ::PlayState_obj::songMultiplier));
HXLINE( 477)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + (data->length / ::PlayState_obj::songMultiplier));
            					}
HXLINE( 480)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 484)		this->recalculateAllSectionTimes();
HXLINE( 490)		::String library2 = null();
HXDLIN( 490)		if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/dialogue",47,74,e6,61))) + HX_(".txt",02,3f,c0,1e))) ),HX_("TEXT",ad,94,ba,37),library2),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 492)			::String library = null();
HXDLIN( 492)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/dialogue",47,74,e6,61))) + HX_(".txt",02,3f,c0,1e))) ),HX_("TEXT",ad,94,ba,37),library));
            		}
HXLINE( 496)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE( 499)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 501)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)2: {
HXLINE( 504)					stageCheck = HX_("halloween",8d,bb,38,50);
            				}
            				break;
            				case (int)3: {
HXLINE( 506)					stageCheck = HX_("philly",28,77,5e,ef);
            				}
            				break;
            				case (int)4: {
HXLINE( 508)					stageCheck = HX_("limo",1f,17,b3,47);
            				}
            				break;
            				case (int)5: {
HXLINE( 510)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("winter-horrorland",9d,39,f4,1e) )) {
HXLINE( 512)						stageCheck = HX_("mallEvil",88,d3,e3,a7);
            					}
            					else {
HXLINE( 516)						stageCheck = HX_("mall",d4,3a,56,48);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 519)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
HXLINE( 521)						stageCheck = HX_("schoolEvil",28,a1,f5,f7);
            					}
            					else {
HXLINE( 525)						stageCheck = HX_("school",74,b8,c8,40);
            					}
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 532)			stageCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 535)		if (::PlayState_obj::isStoryMode) {
HXLINE( 536)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 539)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 541)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 543)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)4: {
HXLINE( 546)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 548)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 550)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 555)			gfCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		}
HXLINE( 558)		if (!(::PlayState_obj::stageTesting)) {
HXLINE( 560)			::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfCheck,null());
HXLINE( 562)			if (::hx::IsNull( ::PlayState_obj::gf->frames )) {
HXLINE( 567)				::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),HX_("gf",1f,5a,00,00),null());
            			}
HXLINE( 570)			::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 572)			if (::hx::IsNull( ::PlayState_obj::boyfriend->frames )) {
HXLINE( 577)				::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("bf",c4,55,00,00));
            			}
HXLINE( 580)			::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 582)			if (::hx::IsNull( ::PlayState_obj::dad->frames )) {
HXLINE( 587)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),HX_("dad",47,36,4c,00),null());
            			}
            		}
HXLINE( 591)		if (!(::PlayState_obj::stageTesting)) {
HXLINE( 592)			::PlayState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
            		}
HXLINE( 594)		 ::haxe::ds::StringMap positions = ( ( ::haxe::ds::StringMap)(::PlayState_obj::Stage->positions->get(::PlayState_obj::Stage->curStage)) );
HXLINE( 595)		bool _hx_tmp9;
HXDLIN( 595)		if (::hx::IsNotNull( positions )) {
HXLINE( 595)			_hx_tmp9 = !(::PlayState_obj::stageTesting);
            		}
            		else {
HXLINE( 595)			_hx_tmp9 = false;
            		}
HXDLIN( 595)		if (_hx_tmp9) {
HXLINE( 597)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,positions);
HXDLIN( 597)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 597)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 597)				::String _hx_char = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 597)				::Array< int > pos = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 598)				{
HXLINE( 598)					{
HXLINE( 598)						 ::Character person = ::PlayState_obj::boyfriend;
HXLINE( 599)						if ((person->curCharacter == _hx_char)) {
HXLINE( 600)							person->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 598)					{
HXLINE( 598)						 ::Character person1 = ::PlayState_obj::gf;
HXLINE( 599)						if ((person1->curCharacter == _hx_char)) {
HXLINE( 600)							person1->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 598)					{
HXLINE( 598)						 ::Character person2 = ::PlayState_obj::dad;
HXLINE( 599)						if ((person2->curCharacter == _hx_char)) {
HXLINE( 600)							person2->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 602)		{
HXLINE( 602)			int _g2 = 0;
HXDLIN( 602)			::cpp::VirtualArray _g3 = ::PlayState_obj::Stage->toAdd;
HXDLIN( 602)			while((_g2 < _g3->get_length())){
HXLINE( 602)				 ::Dynamic i = _g3->__get(_g2);
HXDLIN( 602)				_g2 = (_g2 + 1);
HXLINE( 604)				this->add(i);
            			}
            		}
HXLINE( 606)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 607)			int _g5_current = 0;
HXDLIN( 607)			::Array< ::Dynamic> _g5_array = ::PlayState_obj::Stage->layInFront;
HXDLIN( 607)			while((_g5_current < _g5_array->length)){
HXLINE( 607)				::Array< ::Dynamic> _g6_value = _g5_array->__get(_g5_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 607)				_g5_current = (_g5_current + 1);
HXDLIN( 607)				int _g6_key = (_g5_current - 1);
HXDLIN( 607)				int index = _g6_key;
HXDLIN( 607)				::Array< ::Dynamic> array = _g6_value;
HXLINE( 609)				switch((int)(index)){
            					case (int)0: {
HXLINE( 612)						this->add(::PlayState_obj::gf);
HXLINE( 613)						::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 614)						{
HXLINE( 614)							int _g = 0;
HXDLIN( 614)							while((_g < array->length)){
HXLINE( 614)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 614)								_g = (_g + 1);
HXLINE( 615)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 617)						this->add(::PlayState_obj::dad);
HXLINE( 618)						{
HXLINE( 618)							int _g = 0;
HXDLIN( 618)							while((_g < array->length)){
HXLINE( 618)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 618)								_g = (_g + 1);
HXLINE( 619)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 621)						this->add(::PlayState_obj::boyfriend);
HXLINE( 622)						{
HXLINE( 622)							int _g = 0;
HXDLIN( 622)							while((_g < array->length)){
HXLINE( 622)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 622)								_g = (_g + 1);
HXLINE( 623)								this->add(bg);
            							}
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 627)		Float _hx_tmp10 = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 627)		this->camPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,_hx_tmp10,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 629)		::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            		if (  (_hx_switch_1==HX_("dad",47,36,4c,00)) ){
HXLINE( 641)			 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 641)			_g->set_x((_g->x + 400));
HXDLIN( 641)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ){
HXLINE( 632)			if (!(::PlayState_obj::stageTesting)) {
HXLINE( 633)				::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
            			}
HXLINE( 634)			::PlayState_obj::gf->set_visible(false);
HXLINE( 635)			if (::PlayState_obj::isStoryMode) {
HXLINE( 637)				{
HXLINE( 637)					 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 637)					_g->set_x((_g->x + 600));
            				}
HXLINE( 638)				this->tweenCamIn();
            			}
HXLINE( 631)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 643)			 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 643)			_g->set_x((_g->x + 600));
HXDLIN( 643)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 645)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 645)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 645)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXDLIN( 645)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 647)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 647)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 647)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXDLIN( 647)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 649)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 652)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 654)					 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 657)					this->add(evilTrail);
            				}
            			}
HXLINE( 662)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 662)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 662)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 648)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("zerokung",8b,bf,3e,6f)) ){
HXLINE( 665)			::PlayState_obj::dad->scale->set(((Float)0.7),((Float)0.7));
HXDLIN( 665)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
HXLINE( 669)		::PlayState_obj::Stage->update(( (Float)(0) ));
HXLINE( 671)		if (::PlayState_obj::loadRep) {
HXLINE( 677)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic)) );
HXLINE( 678)			::PlayStateChangeables_obj::safeFrames = ( (int)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) );
HXLINE( 679)			::PlayStateChangeables_obj::botPlay = true;
            		}
HXLINE( 686)		 ::DialogueBox doof = null();
HXLINE( 688)		if (::PlayState_obj::isStoryMode) {
HXLINE( 690)			doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 693)			doof->scrollFactor->set(null(),null());
HXLINE( 694)			doof->finishThing = this->startCountdown_dyn();
            		}
HXLINE( 697)		bool _hx_tmp11;
HXDLIN( 697)		if (!(::PlayState_obj::isStoryMode)) {
HXLINE( 697)			_hx_tmp11 = (::PlayState_obj::songMultiplier == 1);
            		}
            		else {
HXLINE( 697)			_hx_tmp11 = false;
            		}
HXDLIN( 697)		if (_hx_tmp11) {
HXLINE( 699)			Float firstNoteTime = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 700)			bool playerTurn = false;
HXLINE( 701)			{
HXLINE( 701)				int _g6_current = 0;
HXDLIN( 701)				::Array< ::Dynamic> _g6_array = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 701)				while((_g6_current < _g6_array->length)){
HXLINE( 701)					 ::Dynamic _g7_value = _g6_array->__get(_g6_current);
HXDLIN( 701)					_g6_current = (_g6_current + 1);
HXDLIN( 701)					int _g7_key = (_g6_current - 1);
HXDLIN( 701)					int index = _g7_key;
HXDLIN( 701)					 ::Dynamic section = _g7_value;
HXLINE( 703)					bool _hx_tmp;
HXDLIN( 703)					if ((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 703)						_hx_tmp = !(::PlayState_obj::isSM);
            					}
            					else {
HXLINE( 703)						_hx_tmp = false;
            					}
HXDLIN( 703)					if (_hx_tmp) {
HXLINE( 705)						if (::hx::IsGreater( section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),5000 )) {
HXLINE( 707)							this->needSkip = true;
HXLINE( 708)							this->skipTo = (( (Float)(section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ) - ( (Float)(1000) ));
            						}
HXLINE( 710)						goto _hx_goto_16;
            					}
            					else {
HXLINE( 712)						if (::PlayState_obj::isSM) {
HXLINE( 714)							{
HXLINE( 714)								int _g = 0;
HXDLIN( 714)								::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 714)								while((_g < _g1->length)){
HXLINE( 714)									::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN( 714)									_g = (_g + 1);
HXLINE( 716)									if (::hx::IsLess( note->__get(0),firstNoteTime )) {
HXLINE( 718)										if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 720)											firstNoteTime = ( (Float)(note->__get(0)) );
HXLINE( 721)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 722)												playerTurn = true;
            											}
            											else {
HXLINE( 724)												playerTurn = false;
            											}
            										}
            										else {
HXLINE( 726)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 728)												firstNoteTime = ( (Float)(note->__get(0)) );
            											}
            										}
            									}
            								}
            							}
HXLINE( 732)							if (((index + 1) == ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 734)								Float timing;
HXDLIN( 734)								bool timing1;
HXDLIN( 734)								if (!(playerTurn)) {
HXLINE( 734)									timing1 = !(::PlayStateChangeables_obj::Optimize);
            								}
            								else {
HXLINE( 734)									timing1 = false;
            								}
HXDLIN( 734)								if (timing1) {
HXLINE( 734)									timing = firstNoteTime;
            								}
            								else {
HXLINE( 734)									timing = ::TimingStruct_obj::getTimeFromBeat((::TimingStruct_obj::getBeatFromTime(firstNoteTime) - ( (Float)(4) )));
            								}
HXLINE( 736)								if ((timing > 5000)) {
HXLINE( 738)									this->needSkip = true;
HXLINE( 739)									this->skipTo = (timing - ( (Float)(1000) ));
            								}
            							}
            						}
            					}
            				}
            				_hx_goto_16:;
            			}
            		}
HXLINE( 746)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 747)		::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE( 749)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 750)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 752)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 753)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 755)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 755)		this->laneunderlayOpponent = _hx_tmp12->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 756)		this->laneunderlayOpponent->set_alpha(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) ));
HXLINE( 757)		this->laneunderlayOpponent->set_color(-16777216);
HXLINE( 758)		this->laneunderlayOpponent->scrollFactor->set(null(),null());
HXLINE( 760)		 ::flixel::FlxSprite _hx_tmp13 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 760)		this->laneunderlay = _hx_tmp13->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 761)		this->laneunderlay->set_alpha(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) ));
HXLINE( 762)		this->laneunderlay->set_color(-16777216);
HXLINE( 763)		this->laneunderlay->scrollFactor->set(null(),null());
HXLINE( 765)		bool _hx_tmp14;
HXDLIN( 765)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("laneUnderlay",58,04,15,b5),::hx::paccDynamic)) )) {
HXLINE( 765)			_hx_tmp14 = !(::PlayStateChangeables_obj::Optimize);
            		}
            		else {
HXLINE( 765)			_hx_tmp14 = false;
            		}
HXDLIN( 765)		if (_hx_tmp14) {
HXLINE( 767)			bool _hx_tmp;
HXDLIN( 767)			if (!(!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )))) {
HXLINE( 767)				_hx_tmp = this->executeModchart;
            			}
            			else {
HXLINE( 767)				_hx_tmp = true;
            			}
HXDLIN( 767)			if (_hx_tmp) {
HXLINE( 769)				this->add(this->laneunderlayOpponent);
            			}
HXLINE( 771)			this->add(this->laneunderlay);
            		}
HXLINE( 774)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 775)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 777)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 778)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 780)		::PlayState_obj::noteskinPixelSprite = ::NoteskinHelpers_obj::generatePixelSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ),null());
HXLINE( 781)		::PlayState_obj::noteskinSprite = ::NoteskinHelpers_obj::generateNoteskinSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ));
HXLINE( 782)		::PlayState_obj::noteskinPixelSpriteEnds = ::NoteskinHelpers_obj::generatePixelSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ),true);
HXLINE( 784)		this->generateStaticArrows(0);
HXLINE( 785)		this->generateStaticArrows(1);
HXLINE( 789)		this->laneunderlay->set_x((Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->x - ( (Float)(25) )));
HXLINE( 790)		this->laneunderlayOpponent->set_x((Dynamic( ::PlayState_obj::cpuStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->x - ( (Float)(25) )));
HXLINE( 792)		this->laneunderlay->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 793)		this->laneunderlayOpponent->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 797)		bool _hx_tmp15 = ::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic) );
HXLINE( 802)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ));
HXLINE( 805)		if (this->executeModchart) {
HXLINE( 807)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState(::PlayState_obj::isStoryMode);
HXLINE( 808)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic))));
            		}
HXLINE( 813)		if (this->executeModchart) {
HXLINE( 815)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camGame,HX_("camGame",a1,47,50,cf))->Register(::ModchartState_obj::lua);
HXLINE( 816)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camHUD,HX_("camHUD",e8,2b,76,b7))->Register(::ModchartState_obj::lua);
HXLINE( 817)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camSustains",9f,69,a2,15))->Register(::ModchartState_obj::lua);
HXLINE( 818)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camNotes",b2,c1,02,a8))->Register(::ModchartState_obj::lua);
HXLINE( 819)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::dad,HX_("dad",47,36,4c,00))->Register(::ModchartState_obj::lua);
HXLINE( 820)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::gf,HX_("gf",1f,5a,00,00))->Register(::ModchartState_obj::lua);
HXLINE( 821)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6))->Register(::ModchartState_obj::lua);
            		}
HXLINE( 825)		int index = 0;
HXLINE( 827)		if ((::PlayState_obj::startTime != 0)) {
HXLINE( 829)			::Array< ::Dynamic> toBeRemoved = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 830)			{
HXLINE( 830)				int _g = 0;
HXDLIN( 830)				int _g1 = this->unspawnNotes->length;
HXDLIN( 830)				while((_g < _g1)){
HXLINE( 830)					_g = (_g + 1);
HXDLIN( 830)					int i = (_g - 1);
HXLINE( 832)					 ::Note dunceNote = this->unspawnNotes->__get(i).StaticCast<  ::Note >();
HXLINE( 834)					if ((dunceNote->strumTime <= ::PlayState_obj::startTime)) {
HXLINE( 835)						toBeRemoved->push(dunceNote);
            					}
            				}
            			}
HXLINE( 838)			{
HXLINE( 838)				int _g2 = 0;
HXDLIN( 838)				while((_g2 < toBeRemoved->length)){
HXLINE( 838)					 ::Note i = toBeRemoved->__get(_g2).StaticCast<  ::Note >();
HXDLIN( 838)					_g2 = (_g2 + 1);
HXLINE( 839)					this->unspawnNotes->remove(i);
            				}
            			}
HXLINE( 841)			::Debug_obj::logTrace(((HX_("Removed ",a0,48,cd,86) + toBeRemoved->length) + HX_(" cuz of start time",3c,b0,a1,1e)),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),841,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
            		}
HXLINE( 848)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 850)		this->camFollow->setPosition(this->camPos->x,this->camPos->y);
HXLINE( 852)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 854)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 855)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 858)		this->add(this->camFollow);
HXLINE( 860)		 ::flixel::FlxCamera _hx_tmp16 = ::flixel::FlxG_obj::camera;
HXDLIN( 860)		 ::flixel::FlxObject _hx_tmp17 = this->camFollow;
HXDLIN( 860)		_hx_tmp16->follow(_hx_tmp17,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE( 862)		::flixel::FlxG_obj::camera->set_zoom(::PlayState_obj::Stage->camZoom);
HXLINE( 863)		{
HXLINE( 863)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 863)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 863)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 863)			if (point->_weak) {
HXLINE( 863)				point->put();
            			}
            		}
HXLINE( 865)		{
HXLINE( 865)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 865)			_this1->x = ( (Float)(0) );
HXDLIN( 865)			_this1->y = ( (Float)(0) );
HXDLIN( 865)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 865)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 867)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 869)		 ::flixel::FlxSprite _hx_tmp18 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 869)		this->healthBarBG = _hx_tmp18->loadGraphic(::Paths_obj::loadImage(HX_("healthBar",97,8a,92,42),null()),null(),null(),null(),null(),null());
HXLINE( 870)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 871)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 872)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 873)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 875)		Float _hx_tmp19 = (this->healthBarBG->x + 4);
HXDLIN( 875)		Float _hx_tmp20 = (this->healthBarBG->y + 4);
HXDLIN( 875)		int _hx_tmp21 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 875)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp19,_hx_tmp20,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp21,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 877)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 881)		Float _hx_tmp22 = (this->healthBarBG->y + 50);
HXLINE( 883)		::String _hx_tmp23 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) );
HXLINE( 884)		::String _hx_tmp24;
HXDLIN( 884)		if ((::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2) != ((Float)1.00))) {
HXLINE( 884)			_hx_tmp24 = ((HX_(" (",08,1c,00,00) + ::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2)) + HX_("x)",b1,68,00,00));
            		}
            		else {
HXLINE( 884)			_hx_tmp24 = HX_("",00,00,00,00);
            		}
HXLINE( 881)		this->kadeEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,_hx_tmp22,0,(((_hx_tmp23 + _hx_tmp24) + HX_(" - ",73,6f,18,00)) + ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty)),16,null());
HXLINE( 888)		this->kadeEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 889)		this->kadeEngineWatermark->scrollFactor->set(null(),null());
HXLINE( 890)		this->add(this->kadeEngineWatermark);
HXLINE( 892)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 893)			this->kadeEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE( 895)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE( 896)		this->scoreTxt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 897)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 898)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 899)		 ::flixel::text::FlxText _hx_tmp25 = this->scoreTxt;
HXDLIN( 899)		_hx_tmp25->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE( 900)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("healthBar",97,8a,92,42),::hx::paccDynamic)) ))) {
HXLINE( 901)			this->scoreTxt->set_y(this->healthBarBG->y);
            		}
HXLINE( 903)		this->add(this->scoreTxt);
HXLINE( 905)		this->judgementCounter =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,0,0,HX_("",00,00,00,00),20,null());
HXLINE( 906)		this->judgementCounter->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 907)		this->judgementCounter->set_borderSize(( (Float)(2) ));
HXLINE( 908)		this->judgementCounter->set_borderQuality(( (Float)(2) ));
HXLINE( 909)		this->judgementCounter->scrollFactor->set(null(),null());
HXLINE( 910)		this->judgementCounter->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 911)		this->judgementCounter->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 912)		this->judgementCounter->set_text((((((((((HX_("Sicks: ",bb,1b,ab,be) + ::PlayState_obj::sicks) + HX_("\nGoods: ",d2,a1,f4,51)) + ::PlayState_obj::goods) + HX_("\nBads: ",de,84,b3,1f)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nMisses: ",ba,59,21,f5)) + ::PlayState_obj::misses));
HXLINE( 913)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("judgementCounter",c7,fa,f4,d2),::hx::paccDynamic)) )) {
HXLINE( 915)			this->add(this->judgementCounter);
            		}
HXLINE( 918)		Float _hx_tmp26 = this->healthBarBG->x;
HXDLIN( 918)		Float _hx_tmp27 = ((_hx_tmp26 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 918)		int _hx_tmp28;
HXDLIN( 918)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 918)			_hx_tmp28 = 100;
            		}
            		else {
HXLINE( 918)			_hx_tmp28 = -100;
            		}
HXDLIN( 918)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp27,(this->healthBarBG->y + _hx_tmp28),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE( 920)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 921)		this->replayTxt->set_borderSize(( (Float)(4) ));
HXLINE( 922)		this->replayTxt->set_borderQuality(( (Float)(2) ));
HXLINE( 923)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE( 924)		this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 925)		if (::PlayState_obj::loadRep) {
HXLINE( 927)			this->add(this->replayTxt);
            		}
HXLINE( 930)		Float _hx_tmp29 = this->healthBarBG->x;
HXDLIN( 930)		Float _hx_tmp30 = ((_hx_tmp29 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 930)		int _hx_tmp31;
HXDLIN( 930)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 930)			_hx_tmp31 = 100;
            		}
            		else {
HXLINE( 930)			_hx_tmp31 = -100;
            		}
HXDLIN( 930)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp30,(this->healthBarBG->y + _hx_tmp31),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE( 932)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 933)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE( 934)		this->botPlayState->set_borderSize(( (Float)(4) ));
HXLINE( 935)		this->botPlayState->set_borderQuality(( (Float)(2) ));
HXLINE( 936)		this->botPlayState->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 937)		bool _hx_tmp32;
HXDLIN( 937)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE( 937)			_hx_tmp32 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE( 937)			_hx_tmp32 = false;
            		}
HXDLIN( 937)		if (_hx_tmp32) {
HXLINE( 938)			this->add(this->botPlayState);
            		}
HXLINE( 940)		this->addedBotplay = ::PlayStateChangeables_obj::botPlay;
HXLINE( 942)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->curCharacter,true);
HXLINE( 943)		 ::HealthIcon _hx_tmp33 = this->iconP1;
HXDLIN( 943)		Float _hx_tmp34 = this->healthBar->y;
HXDLIN( 943)		_hx_tmp33->set_y((_hx_tmp34 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 945)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::dad->curCharacter,false);
HXLINE( 946)		 ::HealthIcon _hx_tmp35 = this->iconP2;
HXDLIN( 946)		Float _hx_tmp36 = this->healthBar->y;
HXDLIN( 946)		_hx_tmp35->set_y((_hx_tmp36 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE( 948)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("healthBar",97,8a,92,42),::hx::paccDynamic)) )) {
HXLINE( 950)			this->add(this->healthBarBG);
HXLINE( 951)			this->add(this->healthBar);
HXLINE( 952)			this->add(this->iconP1);
HXLINE( 953)			this->add(this->iconP2);
HXLINE( 955)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("colour",4c,c8,86,c6),::hx::paccDynamic)) )) {
HXLINE( 956)				this->healthBar->createFilledBar(::PlayState_obj::dad->barColor,::PlayState_obj::boyfriend->barColor,null(),null());
            			}
            			else {
HXLINE( 958)				this->healthBar->createFilledBar(-65536,-10027213,null(),null());
            			}
            		}
HXLINE( 961)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 962)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 963)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 964)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 965)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 966)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 967)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 968)		this->laneunderlay->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 969)		this->laneunderlayOpponent->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 971)		if (::PlayState_obj::isStoryMode) {
HXLINE( 972)			doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE( 973)		this->kadeEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 975)		this->startingSong = true;
HXLINE( 979)		::PlayState_obj::dad->dance(null(),null());
HXLINE( 980)		::PlayState_obj::boyfriend->dance(null(),null());
HXLINE( 981)		::PlayState_obj::gf->dance(null(),null());
HXLINE( 983)		if (::PlayState_obj::isStoryMode) {
HXLINE( 985)			::String _hx_switch_2 = ::StringTools_obj::replace(this->curSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
            			if (  (_hx_switch_2==HX_("roses",04,6c,64,ed)) ){
HXLINE(1018)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1018)				_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1019)				this->schoolIntro(doof);
HXLINE(1017)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1016)				this->schoolIntro(doof);
HXDLIN(1016)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE(1021)				this->schoolIntro(doof);
HXDLIN(1021)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1010_create)
HXLINE(1010)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1003_create)
HXLINE(1004)						_gthis->camHUD->set_visible(true);
HXLINE(1005)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1006)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),::PlayState_obj::Stage->camZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_994_create)
HXLINE( 995)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 996)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 996)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE( 997)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE( 998)					{
HXLINE( 998)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN( 998)						_g->set_x((_g->x + 200));
            					}
HXLINE( 999)					{
HXLINE( 999)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 999)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN( 999)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 999)						if (point->_weak) {
HXLINE( 999)							point->put();
            						}
            					}
HXLINE(1000)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1002)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 988)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 988)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN( 988)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE( 989)				this->add(blackScreen2);
HXLINE( 990)				blackScreen2->scrollFactor->set(null(),null());
HXLINE( 991)				this->camHUD->set_visible(false);
HXLINE( 993)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_3(_gthis,blackScreen2)),null());
HXLINE( 987)				goto _hx_goto_20;
            			}
            			/* default */{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1025_create)
HXLINE(1025)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1023)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			_hx_goto_20:;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1033_create)
HXLINE(1033)				_gthis->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1031)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_4(_gthis)),null());
            		}
HXLINE(1037)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1038)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1041)		::flixel::FlxG_obj::keys->preventDefaultKeys = ::Array_obj< int >::__new(0);
HXLINE(1042)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null(),null(),null());
HXLINE(1043)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null(),null(),null());
HXLINE(1044)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1075_schoolIntro)
HXLINE(1076)			{
HXLINE(1076)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1076)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1078)			if ((black1->alpha > 0)) {
HXLINE(1080)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1084)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1086)					_gthis->inCutscene = true;
HXLINE(1088)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1093_schoolIntro)
HXLINE(1094)							{
HXLINE(1094)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1094)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1095)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1097)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1108_schoolIntro)
HXLINE(1108)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1103_schoolIntro)
HXLINE(1104)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1105)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1106)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1113_schoolIntro)
HXLINE(1113)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1101)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1102)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1102)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1111)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1090)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1091)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1092)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1120)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1124)					_gthis->startCountdown();
            				}
HXLINE(1126)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1048_schoolIntro)
HXLINE(1047)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1049)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1049)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1050)		black1->scrollFactor->set(null(),null());
HXLINE(1051)		this->add(black1);
HXLINE(1053)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1053)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1054)		red1->scrollFactor->set(null(),null());
HXLINE(1056)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1057)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1057)		senpaiEvil1->set_frames(::Paths_obj::getSparrowAtlas(HX_("weeb/senpaiCrazy",d1,d1,90,fa),null(),null()));
HXLINE(1058)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1059)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1059)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1060)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1061)		senpaiEvil->updateHitbox();
HXLINE(1062)		senpaiEvil->screenCenter(null());
HXLINE(1064)		bool _hx_tmp;
HXDLIN(1064)		if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("roses",04,6c,64,ed) )) {
HXLINE(1064)			_hx_tmp = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) );
            		}
            		else {
HXLINE(1064)			_hx_tmp = true;
            		}
HXDLIN(1064)		if (_hx_tmp) {
HXLINE(1066)			this->remove(black1,null());
HXLINE(1068)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
HXLINE(1070)				this->add(red1);
            			}
            		}
HXLINE(1074)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1160_startCountdown)
HXLINE(1162)			bool _hx_tmp;
HXDLIN(1162)			if (_gthis->allowedToHeadbang) {
HXLINE(1162)				_hx_tmp = (::hx::Mod(swagCounter->__get(0),_gthis->gfSpeed) == 0);
            			}
            			else {
HXLINE(1162)				_hx_tmp = false;
            			}
HXDLIN(1162)			if (_hx_tmp) {
HXLINE(1163)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(1164)			if ((::hx::Mod(swagCounter->__get(0),_gthis->idleBeat) == 0)) {
HXLINE(1166)				bool _hx_tmp;
HXDLIN(1166)				if (_gthis->idleToBeat) {
HXLINE(1166)					_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            				}
            				else {
HXLINE(1166)					_hx_tmp = false;
            				}
HXDLIN(1166)				if (_hx_tmp) {
HXLINE(1167)					::PlayState_obj::boyfriend->dance(_gthis->forcedToIdle,null());
            				}
HXLINE(1168)				if (_gthis->idleToBeat) {
HXLINE(1169)					::PlayState_obj::dad->dance(_gthis->forcedToIdle,null());
            				}
            			}
            			else {
HXLINE(1171)				bool _hx_tmp;
HXDLIN(1171)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(1171)					_hx_tmp = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(1171)					_hx_tmp = true;
            				}
HXDLIN(1171)				if (_hx_tmp) {
HXLINE(1172)					::PlayState_obj::dad->dance(null(),null());
            				}
            			}
HXLINE(1174)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1175)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_34,3));
HXLINE(1176)			introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_35,3));
HXLINE(1178)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1179)			::String week6Bullshit = null();
HXLINE(1181)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1183)				introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
HXLINE(1184)				_gthis->altSuffix = HX_("-pixel",39,03,b3,c0);
HXLINE(1185)				week6Bullshit = HX_("week6",c2,95,be,c7);
            			}
HXLINE(1188)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1192)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1192)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1207_startCountdown)
HXLINE(1207)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1194)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1194)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::loadImage(introAlts->__get(0),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1195)					ready1->scrollFactor->set(null(),null());
HXLINE(1196)					ready1->updateHitbox();
HXLINE(1198)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1199)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1199)						Float _hx_tmp = ready1->get_width();
HXDLIN(1199)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1201)					ready1->screenCenter(null());
HXLINE(1202)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1203)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1203)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1203)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1203)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1210)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1210)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1224_startCountdown)
HXLINE(1224)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1212)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1212)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::loadImage(introAlts->__get(1),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1213)					set1->scrollFactor->set(null(),null());
HXLINE(1215)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1216)						 ::flixel::FlxSprite set = set1;
HXDLIN(1216)						Float _hx_tmp = set1->get_width();
HXDLIN(1216)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1218)					set1->screenCenter(null());
HXLINE(1219)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1220)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1220)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1220)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1220)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1227)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1227)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1243_startCountdown)
HXLINE(1243)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1229)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1229)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::loadImage(introAlts->__get(2),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1230)					go1->scrollFactor->set(null(),null());
HXLINE(1232)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1233)						 ::flixel::FlxSprite go = go1;
HXDLIN(1233)						Float _hx_tmp = go1->get_width();
HXDLIN(1233)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1235)					go1->updateHitbox();
HXLINE(1237)					go1->screenCenter(null());
HXLINE(1238)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1239)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1239)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1239)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1239)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1246)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1246)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            			}
HXLINE(1249)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1249)			int _hx_tmp1 = 0;
HXDLIN(1249)			swagCounter1[_hx_tmp1] = (swagCounter1->__get(_hx_tmp1) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1140_startCountdown)
HXLINE(1139)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1141)		this->inCutscene = false;
HXLINE(1143)		this->appearStaticArrows();
HXLINE(1147)		this->talking = false;
HXLINE(1148)		this->startedCountdown = true;
HXLINE(1149)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1150)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1150)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1152)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1153)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1153)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1154)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1155)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1155)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1157)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_40,1);
HXLINE(1159)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1159)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

::String PlayState_obj::getKey(int charCode){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1258_getKey)
HXLINE(1259)		{
HXLINE(1259)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap);
HXDLIN(1259)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1259)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1259)				::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(1259)				int value = ( (int)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(1261)				if ((charCode == value)) {
HXLINE(1262)					return key;
            				}
            			}
            		}
HXLINE(1264)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKey,return )

void PlayState_obj::releaseInput( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1270_releaseInput)
HXLINE(1272)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1274)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1281)		int data = -1;
HXLINE(1283)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1286)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1290)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1292)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1288)				data = 1;
            			}
            			break;
            		}
HXLINE(1295)		{
HXLINE(1295)			int _g = 0;
HXDLIN(1295)			int _g1 = binds->length;
HXDLIN(1295)			while((_g < _g1)){
HXLINE(1295)				_g = (_g + 1);
HXDLIN(1295)				int i = (_g - 1);
HXLINE(1297)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1297)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1298)					data = i;
            				}
            			}
            		}
HXLINE(1301)		if ((data == -1)) {
HXLINE(1302)			return;
            		}
HXLINE(1304)		this->keys[data] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,releaseInput,(void))

void PlayState_obj::handleInput( ::openfl::events::KeyboardEvent evt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1367_handleInput)
HXLINE(1367)			bool _hx_tmp;
HXDLIN(1367)			bool _hx_tmp1;
HXDLIN(1367)			if (daNote->canBeHit) {
HXLINE(1367)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(1367)				_hx_tmp1 = false;
            			}
HXDLIN(1367)			if (_hx_tmp1) {
HXLINE(1367)				_hx_tmp = !(daNote->wasGoodHit);
            			}
            			else {
HXLINE(1367)				_hx_tmp = false;
            			}
HXDLIN(1367)			if (_hx_tmp) {
HXLINE(1368)				_gthis->closestNotes->push(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::Note a, ::Note b){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1371_handleInput)
HXLINE(1371)			return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1310_handleInput)
HXLINE(1309)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1312)		bool _hx_tmp;
HXDLIN(1312)		bool _hx_tmp1;
HXDLIN(1312)		if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(1312)			_hx_tmp1 = ::PlayState_obj::loadRep;
            		}
            		else {
HXLINE(1312)			_hx_tmp1 = true;
            		}
HXDLIN(1312)		if (!(_hx_tmp1)) {
HXLINE(1312)			_hx_tmp = this->paused;
            		}
            		else {
HXLINE(1312)			_hx_tmp = true;
            		}
HXDLIN(1312)		if (_hx_tmp) {
HXLINE(1313)			return;
            		}
HXLINE(1320)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1322)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1329)		int data = -1;
HXLINE(1331)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1334)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1338)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1340)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1336)				data = 1;
            			}
            			break;
            		}
HXLINE(1343)		{
HXLINE(1343)			int _g = 0;
HXDLIN(1343)			int _g1 = binds->length;
HXDLIN(1343)			while((_g < _g1)){
HXLINE(1343)				_g = (_g + 1);
HXDLIN(1343)				int i = (_g - 1);
HXLINE(1345)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1345)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1346)					data = i;
            				}
            			}
            		}
HXLINE(1348)		if ((data == -1)) {
HXLINE(1351)			return;
            		}
HXLINE(1353)		if (this->keys->__get(data)) {
HXLINE(1356)			return;
            		}
HXLINE(1359)		this->keys[data] = true;
HXLINE(1361)		 ::Ana ana =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),data);
HXLINE(1363)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1365)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1371)		this->closestNotes->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE(1373)		::Array< ::Dynamic> dataNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1374)		{
HXLINE(1374)			int _g2 = 0;
HXDLIN(1374)			::Array< ::Dynamic> _g3 = this->closestNotes;
HXDLIN(1374)			while((_g2 < _g3->length)){
HXLINE(1374)				 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1374)				_g2 = (_g2 + 1);
HXLINE(1375)				bool _hx_tmp;
HXDLIN(1375)				if ((i->noteData == data)) {
HXLINE(1375)					_hx_tmp = !(i->isSustainNote);
            				}
            				else {
HXLINE(1375)					_hx_tmp = false;
            				}
HXDLIN(1375)				if (_hx_tmp) {
HXLINE(1376)					dataNotes->push(i);
            				}
            			}
            		}
HXLINE(1380)		if ((dataNotes->length != 0)) {
HXLINE(1382)			 ::Note coolNote = null();
HXLINE(1384)			{
HXLINE(1384)				int _g = 0;
HXDLIN(1384)				while((_g < dataNotes->length)){
HXLINE(1384)					 ::Note i = dataNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(1384)					_g = (_g + 1);
HXLINE(1386)					coolNote = i;
HXLINE(1387)					goto _hx_goto_47;
            				}
            				_hx_goto_47:;
            			}
HXLINE(1390)			if ((dataNotes->length > 1)) {
HXLINE(1392)				int _g = 0;
HXDLIN(1392)				int _g1 = dataNotes->length;
HXDLIN(1392)				while((_g < _g1)){
HXLINE(1392)					_g = (_g + 1);
HXDLIN(1392)					int i = (_g - 1);
HXLINE(1394)					if ((i == 0)) {
HXLINE(1395)						continue;
            					}
HXLINE(1397)					 ::Note note = dataNotes->__get(i).StaticCast<  ::Note >();
HXLINE(1399)					bool _hx_tmp;
HXDLIN(1399)					bool _hx_tmp1;
HXDLIN(1399)					if (!(note->isSustainNote)) {
HXLINE(1399)						_hx_tmp1 = ((note->strumTime - coolNote->strumTime) < 2);
            					}
            					else {
HXLINE(1399)						_hx_tmp1 = false;
            					}
HXDLIN(1399)					if (_hx_tmp1) {
HXLINE(1399)						_hx_tmp = (note->noteData == data);
            					}
            					else {
HXLINE(1399)						_hx_tmp = false;
            					}
HXDLIN(1399)					if (_hx_tmp) {
HXLINE(1403)						note->kill();
HXLINE(1404)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(1405)						note->destroy();
            					}
            				}
            			}
HXLINE(1410)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(1411)			this->goodNoteHit(coolNote,null());
HXLINE(1412)			Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(1413)			ana->hit = true;
HXLINE(1414)			ana->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(1415)			ana->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
            		}
            		else {
HXLINE(1417)			bool _hx_tmp;
HXDLIN(1417)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(1417)				_hx_tmp = this->songStarted;
            			}
            			else {
HXLINE(1417)				_hx_tmp = false;
            			}
HXDLIN(1417)			if (_hx_tmp) {
HXLINE(1419)				this->noteMiss(data,null());
HXLINE(1420)				ana->hit = false;
HXLINE(1421)				ana->hitJudge = HX_("shit",c0,cf,52,4c);
HXLINE(1422)				ana->nearestNote = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1423)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1423)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.20));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,handleInput,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1438_startSong)
HXLINE(1439)		this->startingSong = false;
HXLINE(1440)		this->songStarted = true;
HXLINE(1441)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1442)		this->lastReportedPlayheadPosition = 0;
HXLINE(1444)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1445)		this->vocals->play(null(),null(),null());
HXLINE(1448)		if (this->allowedToHeadbang) {
HXLINE(1449)			::PlayState_obj::gf->dance(null(),null());
            		}
HXLINE(1450)		bool _hx_tmp;
HXDLIN(1450)		if (this->idleToBeat) {
HXLINE(1450)			_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1450)			_hx_tmp = false;
            		}
HXDLIN(1450)		if (_hx_tmp) {
HXLINE(1451)			::PlayState_obj::boyfriend->dance(this->forcedToIdle,null());
            		}
HXLINE(1452)		bool _hx_tmp1;
HXDLIN(1452)		if (this->idleToBeat) {
HXLINE(1452)			_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1452)			_hx_tmp1 = false;
            		}
HXDLIN(1452)		if (_hx_tmp1) {
HXLINE(1453)			::PlayState_obj::dad->dance(this->forcedToIdle,null());
            		}
HXLINE(1456)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(1459)			this->allowedToCheer = true;
HXDLIN(1459)			goto _hx_goto_52;
            		}
            		/* default */{
HXLINE(1461)			this->allowedToCheer = false;
            		}
            		_hx_goto_52:;
HXLINE(1464)		if (this->useVideo) {
HXLINE(1465)			::GlobalVideo_obj::get()->__Field(HX_("resume",ad,69,84,08),::hx::paccDynamic)();
            		}
HXLINE(1468)		if (this->executeModchart) {
HXLINE(1469)			::PlayState_obj::luaModchart->executeState(HX_("songStart",4d,bc,85,b3),::cpp::VirtualArray_obj::__new(1)->init(0,null()));
            		}
HXLINE(1474)		::String _hx_tmp2 = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1474)		::String _hx_tmp3 = (_hx_tmp2 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1481)		::String _hx_tmp4 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1474)		::DiscordClient_obj::changePresence(_hx_tmp3,(((_hx_tmp4 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1489)		::flixel::FlxG_obj::sound->music->set_time(::PlayState_obj::startTime);
HXLINE(1490)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1491)			this->vocals->set_time(::PlayState_obj::startTime);
            		}
HXLINE(1492)		::Conductor_obj::songPosition = ::PlayState_obj::startTime;
HXLINE(1493)		::PlayState_obj::startTime = ( (Float)(0) );
HXLINE(1519)		{
HXLINE(1520)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(1521)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1522)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(1527)		{
HXLINE(1527)			int _g = 0;
HXDLIN(1527)			int _g1 = this->unspawnNotes->length;
HXDLIN(1527)			while((_g < _g1)){
HXLINE(1527)				_g = (_g + 1);
HXDLIN(1527)				int i = (_g - 1);
HXLINE(1528)				if ((this->unspawnNotes->__get(i).StaticCast<  ::Note >()->strumTime < ::PlayState_obj::startTime)) {
HXLINE(1529)					this->unspawnNotes->remove(this->unspawnNotes->__get(i).StaticCast<  ::Note >());
            				}
            			}
            		}
HXLINE(1531)		if (this->needSkip) {
HXLINE(1533)			this->skipActive = true;
HXLINE(1534)			this->skipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->healthBarBG->x + 80),(this->healthBarBG->y - ( (Float)(110) )),500,null(),null(),null());
HXLINE(1535)			this->skipText->set_text(HX_("Press Space to Skip Intro",59,92,f0,d6));
HXLINE(1536)			this->skipText->set_size(30);
HXLINE(1537)			this->skipText->set_color(-1);
HXLINE(1538)			{
HXLINE(1538)				 ::flixel::text::FlxText _this = this->skipText;
HXDLIN(1538)				_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1538)				_this->set_borderColor(-16777216);
HXDLIN(1538)				_this->set_borderSize(( (Float)(2) ));
HXDLIN(1538)				_this->set_borderQuality(( (Float)(1) ));
            			}
HXLINE(1539)			this->skipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1540)			this->skipText->set_alpha(( (Float)(0) ));
HXLINE(1541)			::flixel::tweens::FlxTween_obj::tween(this->skipText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.2),null());
HXLINE(1542)			this->add(this->skipText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1549_generateSong)
HXLINE(1552)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1553)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE(1555)		this->curSong = ( (::String)(songData->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE(1558)		bool _hx_tmp;
HXDLIN(1558)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1558)			_hx_tmp = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1558)			_hx_tmp = false;
            		}
HXDLIN(1558)		if (_hx_tmp) {
HXLINE(1559)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1559)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1559)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1559)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1559)				goto _hx_goto_55;
            			}
            			if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1559)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1559)				goto _hx_goto_55;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1559)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1559)				goto _hx_goto_55;
            			}
            			_hx_goto_55:;
HXDLIN(1559)			::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1559)			::String _hx_tmp1;
HXDLIN(1559)			if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(1559)				_hx_tmp1 = result;
            			}
            			else {
HXLINE(1559)				_hx_tmp1 = null();
            			}
HXDLIN(1559)			this->vocals = _hx_tmp->loadEmbedded(_hx_tmp1,null(),null(),null());
            		}
            		else {
HXLINE(1561)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1571)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1573)		if (!(this->paused)) {
HXLINE(1576)			bool _hx_tmp;
HXDLIN(1576)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1576)				_hx_tmp = ::PlayState_obj::isSM;
            			}
            			else {
HXLINE(1576)				_hx_tmp = false;
            			}
HXDLIN(1576)			if (_hx_tmp) {
HXLINE(1579)				 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1580)				 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1581)				sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1582)				::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            			}
            			else {
HXLINE(1585)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1585)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1585)				::String _hx_switch_1 = songLowercase;
            				if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1585)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1585)					goto _hx_goto_56;
            				}
            				if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1585)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1585)					goto _hx_goto_56;
            				}
            				if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1585)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1585)					goto _hx_goto_56;
            				}
            				_hx_goto_56:;
HXDLIN(1585)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            			}
            		}
HXLINE(1591)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1593)		bool _hx_tmp1;
HXDLIN(1593)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1593)			_hx_tmp1 = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1593)			_hx_tmp1 = false;
            		}
HXDLIN(1593)		if (_hx_tmp1) {
HXLINE(1594)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1594)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1594)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1594)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1594)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1594)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1594)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1594)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1594)				goto _hx_goto_57;
            			}
            			_hx_goto_57:;
HXDLIN(1594)			::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1594)			::String EmbeddedSound;
HXDLIN(1594)			if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(1594)				EmbeddedSound = result;
            			}
            			else {
HXLINE(1594)				EmbeddedSound = null();
            			}
HXDLIN(1594)			bool _hx_tmp;
HXDLIN(1594)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1594)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1594)				_hx_tmp = true;
            			}
HXDLIN(1594)			if (_hx_tmp) {
HXLINE(1594)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1595)		if (!(::PlayState_obj::isSM)) {
HXLINE(1596)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1596)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1596)			::String _hx_switch_3 = songLowercase;
            			if (  (_hx_switch_3==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1596)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1596)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_3==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1596)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1596)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_3==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1596)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1596)				goto _hx_goto_58;
            			}
            			_hx_goto_58:;
HXDLIN(1596)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1596)			bool _hx_tmp;
HXDLIN(1596)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1596)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1596)				_hx_tmp = true;
            			}
HXDLIN(1596)			if (_hx_tmp) {
HXLINE(1596)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1599)		this->songLength = ((::flixel::FlxG_obj::sound->music->_length / ::PlayState_obj::songMultiplier) / ( (Float)(1000) ));
HXLINE(1601)		::Conductor_obj::crochet = ((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE(1602)		::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
HXLINE(1604)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1606)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1606)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("healthBar",97,8a,92,42),null()),null(),null(),null(),null(),null());
HXLINE(1607)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1608)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 35));
            			}
HXLINE(1609)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1610)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1612)			Float _hx_tmp1 = (( (Float)(640) ) - (( (Float)(::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(100) )))) ) / ( (Float)(2) )));
HXDLIN(1612)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(1612)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(100) )));
HXLINE(1613)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() + 6));
HXLINE(1612)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,this->songLength,null());
HXLINE(1614)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1615)			 ::flixel::ui::FlxBar _hx_tmp5 = ::PlayState_obj::songPosBar;
HXDLIN(1615)			int Alpha = 255;
HXDLIN(1615)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1615)			{
HXLINE(1615)				color = (color & -16711681);
HXDLIN(1615)				color = (color | 0);
            			}
HXDLIN(1615)			{
HXLINE(1615)				color = (color & -65281);
HXDLIN(1615)				color = (color | 65280);
            			}
HXDLIN(1615)			{
HXLINE(1615)				color = (color & -256);
HXDLIN(1615)				color = (color | 128);
            			}
HXDLIN(1615)			{
HXLINE(1615)				color = (color & 16777215);
HXDLIN(1615)				int color1;
HXDLIN(1615)				if ((Alpha > 255)) {
HXLINE(1615)					color1 = 255;
            				}
            				else {
HXLINE(1615)					if ((Alpha < 0)) {
HXLINE(1615)						color1 = 0;
            					}
            					else {
HXLINE(1615)						color1 = Alpha;
            					}
            				}
HXDLIN(1615)				color = (color | (color1 << 24));
            			}
HXDLIN(1615)			_hx_tmp5->createFilledBar(-16777216,color,null(),null());
HXLINE(1616)			this->add(::PlayState_obj::songPosBar);
HXLINE(1618)			 ::flixel::FlxSprite _hx_tmp6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::songPosBar->x,::PlayState_obj::songPosBar->y,null());
HXDLIN(1618)			int _hx_tmp7 = ::Math_obj::floor(::PlayState_obj::songPosBar->get_width());
HXDLIN(1618)			this->bar = _hx_tmp6->makeGraphic(_hx_tmp7,::Math_obj::floor(::PlayState_obj::songPosBar->get_height()),0,null(),null());
HXLINE(1620)			this->add(this->bar);
HXLINE(1622)			 ::flixel::FlxSprite _hx_tmp8 = this->bar;
HXDLIN(1622)			Float _hx_tmp9 = ::PlayState_obj::songPosBar->get_width();
HXDLIN(1622)			Float _hx_tmp10 = ::PlayState_obj::songPosBar->get_height();
HXDLIN(1622)			::flixel::util::FlxSpriteUtil_obj::drawRect(_hx_tmp8,( (Float)(0) ),( (Float)(0) ),_hx_tmp9,_hx_tmp10,0, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("color",63,71,5c,4a),-16777216)
            				->setFixed(1,HX_("thickness",74,f1,66,5a),4)),null());
HXLINE(1624)			 ::flixel::FlxSprite _hx_tmp11 = ::PlayState_obj::songPosBG;
HXDLIN(1624)			_hx_tmp11->set_width(::PlayState_obj::songPosBar->get_width());
HXLINE(1626)			Float _hx_tmp12 = ::PlayState_obj::songPosBG->x;
HXDLIN(1626)			Float _hx_tmp13 = (_hx_tmp12 + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN(1626)			this->songName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_hx_tmp13 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ).length * 5)) )),(::PlayState_obj::songPosBG->y - ( (Float)(15) )),0,( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ),16,null());
HXLINE(1627)			this->songName->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1628)			this->songName->scrollFactor->set(null(),null());
HXLINE(1630)			 ::flixel::text::FlxText _hx_tmp14 = this->songName;
HXDLIN(1630)			::String _hx_tmp15 = ( (::String)((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00))) );
HXDLIN(1630)			_hx_tmp14->set_text(((_hx_tmp15 + ::flixel::util::FlxStringUtil_obj::formatTime(this->songLength,false)) + HX_(")",29,00,00,00)));
HXLINE(1631)			 ::flixel::text::FlxText _hx_tmp16 = this->songName;
HXDLIN(1631)			Float _hx_tmp17 = ::PlayState_obj::songPosBG->y;
HXDLIN(1631)			_hx_tmp16->set_y((_hx_tmp17 + (::PlayState_obj::songPosBG->get_height() / ( (Float)(3) ))));
HXLINE(1633)			this->add(this->songName);
HXLINE(1635)			this->songName->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1637)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1638)			this->bar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1639)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1640)			this->songName->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1643)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1644)		this->add(this->notes);
HXLINE(1646)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1651)		int playerCounter = 0;
HXLINE(1653)		int daBeats = 0;
HXLINE(1655)		{
HXLINE(1655)			int _g = 0;
HXDLIN(1655)			while((_g < noteData->length)){
HXLINE(1655)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(1655)				_g = (_g + 1);
HXLINE(1657)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1659)				{
HXLINE(1659)					int _g1 = 0;
HXDLIN(1659)					::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1659)					while((_g1 < _g2->length)){
HXLINE(1659)						::cpp::VirtualArray songNotes = ::cpp::VirtualArray( _g2->__get(_g1));
HXDLIN(1659)						_g1 = (_g1 + 1);
HXLINE(1661)						Float daStrumTime = (( (Float)(songNotes->__get(0)) ) / ::PlayState_obj::songMultiplier);
HXLINE(1662)						if ((daStrumTime < 0)) {
HXLINE(1663)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1664)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),4));
HXLINE(1666)						bool gottaHitNote = true;
HXLINE(1668)						bool _hx_tmp;
HXDLIN(1668)						if (::hx::IsGreater( songNotes->__get(1),3 )) {
HXLINE(1668)							_hx_tmp = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            						}
            						else {
HXLINE(1668)							_hx_tmp = false;
            						}
HXDLIN(1668)						if (_hx_tmp) {
HXLINE(1669)							gottaHitNote = false;
            						}
            						else {
HXLINE(1670)							bool _hx_tmp;
HXDLIN(1670)							if (::hx::IsLess( songNotes->__get(1),4 )) {
HXLINE(1670)								_hx_tmp = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            							}
            							else {
HXLINE(1670)								_hx_tmp = false;
            							}
HXDLIN(1670)							if (_hx_tmp) {
HXLINE(1671)								gottaHitNote = false;
            							}
            						}
HXLINE(1673)						 ::Note oldNote;
HXLINE(1674)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1675)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1677)							oldNote = null();
            						}
HXLINE(1679)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,false,false,false,songNotes->__get(4));
HXLINE(1681)						bool _hx_tmp1;
HXDLIN(1681)						if (!(gottaHitNote)) {
HXLINE(1681)							_hx_tmp1 = ::PlayStateChangeables_obj::Optimize;
            						}
            						else {
HXLINE(1681)							_hx_tmp1 = false;
            						}
HXDLIN(1681)						if (_hx_tmp1) {
HXLINE(1682)							continue;
            						}
HXLINE(1684)						swagNote->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime((( (Float)(songNotes->__get(2)) ) / ::PlayState_obj::songMultiplier)));
HXLINE(1685)						swagNote->scrollFactor->set(0,0);
HXLINE(1687)						Float susLength = swagNote->sustainLength;
HXLINE(1689)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1690)						this->unspawnNotes->push(swagNote);
HXLINE(1692)						bool _hx_tmp2;
HXDLIN(1692)						bool _hx_tmp3;
HXDLIN(1692)						if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(1693)							bool _hx_tmp;
HXDLIN(1693)							if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(1693)								_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(1693)								_hx_tmp = true;
            							}
HXDLIN(1693)							if (_hx_tmp) {
HXLINE(1692)								_hx_tmp3 = !(gottaHitNote);
            							}
            							else {
HXLINE(1692)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(1692)							_hx_tmp3 = true;
            						}
HXDLIN(1692)						if (!(_hx_tmp3)) {
HXLINE(1694)							if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(1692)								_hx_tmp2 = gottaHitNote;
            							}
            							else {
HXLINE(1692)								_hx_tmp2 = false;
            							}
            						}
            						else {
HXLINE(1692)							_hx_tmp2 = true;
            						}
HXDLIN(1692)						swagNote->isAlt = _hx_tmp2;
HXLINE(1696)						if ((susLength > 0)) {
HXLINE(1697)							swagNote->isParent = true;
            						}
HXLINE(1699)						int type = 0;
HXLINE(1701)						{
HXLINE(1701)							int _g = 0;
HXDLIN(1701)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1701)							while((_g < _g3)){
HXLINE(1701)								_g = (_g + 1);
HXDLIN(1701)								int susNote = (_g - 1);
HXLINE(1703)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1705)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true,null(),null(),null());
HXLINE(1706)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1707)								this->unspawnNotes->push(sustainNote);
HXLINE(1708)								bool _hx_tmp;
HXDLIN(1708)								bool _hx_tmp1;
HXDLIN(1708)								if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(1709)									bool _hx_tmp;
HXDLIN(1709)									if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(1709)										_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            									}
            									else {
HXLINE(1709)										_hx_tmp = true;
            									}
HXDLIN(1709)									if (_hx_tmp) {
HXLINE(1708)										_hx_tmp1 = !(gottaHitNote);
            									}
            									else {
HXLINE(1708)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(1708)									_hx_tmp1 = true;
            								}
HXDLIN(1708)								if (!(_hx_tmp1)) {
HXLINE(1710)									if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(1708)										_hx_tmp = gottaHitNote;
            									}
            									else {
HXLINE(1708)										_hx_tmp = false;
            									}
            								}
            								else {
HXLINE(1708)									_hx_tmp = true;
            								}
HXDLIN(1708)								sustainNote->isAlt = _hx_tmp;
HXLINE(1712)								sustainNote->mustPress = gottaHitNote;
HXLINE(1714)								if (sustainNote->mustPress) {
HXLINE(1716)									 ::Note _g = sustainNote;
HXDLIN(1716)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
HXLINE(1719)								sustainNote->parent = swagNote;
HXLINE(1720)								swagNote->children->push(sustainNote);
HXLINE(1721)								sustainNote->spotInLine = type;
HXLINE(1722)								type = (type + 1);
            							}
            						}
HXLINE(1725)						swagNote->mustPress = gottaHitNote;
HXLINE(1727)						if (swagNote->mustPress) {
HXLINE(1729)							 ::Note _g = swagNote;
HXDLIN(1729)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1732)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1738)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1740)		this->generatedMusic = true;
HXLINE(1742)		::Debug_obj::logTrace(HX_("whats the fuckin shit",64,fd,73,76),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1742,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1747_sortByShit)
HXDLIN(1747)		Float Value1 = Obj1->strumTime;
HXDLIN(1747)		Float Value2 = Obj2->strumTime;
HXDLIN(1747)		int result = 0;
HXDLIN(1747)		if ((Value1 < Value2)) {
HXDLIN(1747)			result = -1;
            		}
            		else {
HXDLIN(1747)			if ((Value1 > Value2)) {
HXDLIN(1747)				result = 1;
            			}
            		}
HXDLIN(1747)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1752_generateStaticArrows)
HXDLIN(1752)		int _g = 0;
HXDLIN(1752)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1852_generateStaticArrows)
HXLINE(1852)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(1752)			_g = (_g + 1);
HXDLIN(1752)			int i = (_g - 1);
HXLINE(1755)			 ::StaticArrow babyArrow =  ::StaticArrow_obj::__alloc( HX_CTX ,( (Float)(-10) ),this->strumLine->y);
HXLINE(1758)			::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE(1760)			bool _hx_tmp;
HXDLIN(1760)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(1760)				_hx_tmp = (player == 0);
            			}
            			else {
HXLINE(1760)				_hx_tmp = false;
            			}
HXDLIN(1760)			if (_hx_tmp) {
HXLINE(1761)				continue;
            			}
HXLINE(1763)			bool _hx_tmp1;
HXDLIN(1763)			if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE(1763)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("overrideNoteskins",38,86,30,16),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(1763)				_hx_tmp1 = false;
            			}
HXDLIN(1763)			if (_hx_tmp1) {
HXLINE(1765)				if ((::PlayState_obj::storyWeek == 6)) {
HXLINE(1768)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE(1773)				noteTypeCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			}
HXLINE(1776)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1779)				babyArrow->loadGraphic(::PlayState_obj::noteskinPixelSprite,true,17,17,null(),null());
HXLINE(1780)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_67,1),null(),null(),null(),null());
HXLINE(1781)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_68,1),null(),null(),null(),null());
HXLINE(1782)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_69,1),null(),null(),null(),null());
HXLINE(1783)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_70,1),null(),null(),null(),null());
HXLINE(1785)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1785)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE(1786)				babyArrow->updateHitbox();
HXLINE(1787)				babyArrow->set_antialiasing(false);
HXLINE(1789)				{
HXLINE(1789)					 ::StaticArrow _g = babyArrow;
HXDLIN(1789)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1790)				babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE(1791)				babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::__new(2)->init(0,(4 + i))->init(1,(8 + i)),12,false,null(),null());
HXLINE(1792)				babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::__new(2)->init(0,(12 + i))->init(1,(16 + i)),24,false,null(),null());
HXLINE(1794)				{
HXLINE(1796)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 0),::Array_obj< int >::fromData( _hx_array_data_46c2835d_71,2),24,false,null(),null());
HXDLIN(1796)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 1),::Array_obj< int >::fromData( _hx_array_data_46c2835d_72,2),24,false,null(),null());
HXDLIN(1796)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 2),::Array_obj< int >::fromData( _hx_array_data_46c2835d_73,2),24,false,null(),null());
HXDLIN(1796)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 3),::Array_obj< int >::fromData( _hx_array_data_46c2835d_74,2),24,false,null(),null());
            				}
            			}
            			else {
HXLINE(1800)				babyArrow->set_frames(::PlayState_obj::noteskinSprite);
HXLINE(1801)				::Debug_obj::logTrace(babyArrow->frames,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1801,HX_("PlayState",5d,83,c2,46),HX_("generateStaticArrows",ad,44,90,42)));
HXLINE(1802)				{
HXLINE(1803)					{
HXLINE(1804)						babyArrow->animation->addByPrefix(this->dataColor->__get(0),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(0)),null(),null(),null(),null());
HXLINE(1805)						 ::flixel::animation::FlxAnimationController babyArrow1 = babyArrow->animation;
HXDLIN(1805)						babyArrow1->addByPrefix((HX_("dirCon",f5,88,50,bc) + 0),(this->dataSuffix->__get(0).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1803)					{
HXLINE(1804)						babyArrow->animation->addByPrefix(this->dataColor->__get(1),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(1)),null(),null(),null(),null());
HXLINE(1805)						 ::flixel::animation::FlxAnimationController babyArrow2 = babyArrow->animation;
HXDLIN(1805)						babyArrow2->addByPrefix((HX_("dirCon",f5,88,50,bc) + 1),(this->dataSuffix->__get(1).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1803)					{
HXLINE(1804)						babyArrow->animation->addByPrefix(this->dataColor->__get(2),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(2)),null(),null(),null(),null());
HXLINE(1805)						 ::flixel::animation::FlxAnimationController babyArrow3 = babyArrow->animation;
HXDLIN(1805)						babyArrow3->addByPrefix((HX_("dirCon",f5,88,50,bc) + 2),(this->dataSuffix->__get(2).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1803)					{
HXLINE(1804)						babyArrow->animation->addByPrefix(this->dataColor->__get(3),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(3)),null(),null(),null(),null());
HXLINE(1805)						 ::flixel::animation::FlxAnimationController babyArrow4 = babyArrow->animation;
HXDLIN(1805)						babyArrow4->addByPrefix((HX_("dirCon",f5,88,50,bc) + 3),(this->dataSuffix->__get(3).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
            				}
HXLINE(1808)				::String lowerDir = this->dataSuffix->__get(i).toLowerCase();
HXLINE(1810)				babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(i)),null(),null(),null(),null());
HXLINE(1811)				babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),(lowerDir + HX_(" press",63,df,f3,93)),24,false,null(),null());
HXLINE(1812)				babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),(lowerDir + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
HXLINE(1814)				{
HXLINE(1814)					 ::StaticArrow _g = babyArrow;
HXDLIN(1814)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1816)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(1817)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
            			}
HXLINE(1820)			babyArrow->updateHitbox();
HXLINE(1821)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1823)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1824)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1826)				{
HXLINE(1826)					 ::StaticArrow _g = babyArrow;
HXDLIN(1826)					_g->set_y((_g->y - ( (Float)(10) )));
            				}
HXLINE(1828)				bool _hx_tmp;
HXDLIN(1828)				bool _hx_tmp1;
HXDLIN(1828)				if (!(!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )))) {
HXLINE(1828)					_hx_tmp1 = this->executeModchart;
            				}
            				else {
HXLINE(1828)					_hx_tmp1 = true;
            				}
HXDLIN(1828)				if (!(_hx_tmp1)) {
HXLINE(1828)					_hx_tmp = (player == 1);
            				}
            				else {
HXLINE(1828)					_hx_tmp = true;
            				}
HXDLIN(1828)				if (_hx_tmp) {
HXLINE(1829)					::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            				}
            			}
HXLINE(1832)			babyArrow->ID = i;
HXLINE(1834)			switch((int)(player)){
            				case (int)0: {
HXLINE(1837)					{
HXLINE(1837)						 ::StaticArrow _g = babyArrow;
HXDLIN(1837)						_g->set_x((_g->x + 20));
            					}
HXLINE(1838)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            				case (int)1: {
HXLINE(1840)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            			}
HXLINE(1843)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(1844)			{
HXLINE(1844)				 ::StaticArrow _g1 = babyArrow;
HXDLIN(1844)				_g1->set_x((_g1->x + 110));
            			}
HXLINE(1845)			{
HXLINE(1845)				 ::StaticArrow _g2 = babyArrow;
HXDLIN(1845)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1847)			bool _hx_tmp2;
HXDLIN(1847)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(1847)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )) {
HXLINE(1847)					_hx_tmp2 = !(this->executeModchart);
            				}
            				else {
HXLINE(1847)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(1847)				_hx_tmp2 = true;
            			}
HXDLIN(1847)			if (_hx_tmp2) {
HXLINE(1848)				 ::StaticArrow _g = babyArrow;
HXDLIN(1848)				_g->set_x((_g->x - ( (Float)(320) )));
            			}
HXLINE(1850)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(1855)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::StaticArrow >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::appearStaticArrows(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< int >,index) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite babyArrow){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1863_appearStaticArrows)
HXLINE(1864)			bool _hx_tmp;
HXDLIN(1864)			bool _hx_tmp1;
HXDLIN(1864)			if (::PlayState_obj::isStoryMode) {
HXLINE(1864)				_hx_tmp1 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1864)				_hx_tmp1 = false;
            			}
HXDLIN(1864)			if (!(_hx_tmp1)) {
HXLINE(1864)				_hx_tmp = _gthis->executeModchart;
            			}
            			else {
HXLINE(1864)				_hx_tmp = true;
            			}
HXDLIN(1864)			if (_hx_tmp) {
HXLINE(1865)				babyArrow->set_alpha(( (Float)(1) ));
            			}
HXLINE(1866)			bool _hx_tmp2;
HXDLIN(1866)			if ((index->__get(0) > 3)) {
HXLINE(1866)				_hx_tmp2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(1866)				_hx_tmp2 = false;
            			}
HXDLIN(1866)			if (_hx_tmp2) {
HXLINE(1867)				babyArrow->set_alpha(( (Float)(1) ));
            			}
HXLINE(1868)			index[0]++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1860_appearStaticArrows)
HXLINE(1859)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1861)		::Array< int > index = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_77,1);
HXLINE(1862)		::PlayState_obj::strumLineNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,index)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,appearStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1874_tweenCamIn)
HXDLIN(1874)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1878_openSubState)
HXLINE(1879)		if (this->paused) {
HXLINE(1881)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1883)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1884)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1885)					if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1886)						this->vocals->pause();
            					}
            				}
            			}
HXLINE(1890)			::String _hx_tmp = ( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1890)			::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1896)			::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1890)			::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1903)			if (!(this->startTimer->finished)) {
HXLINE(1904)				this->startTimer->active = false;
            			}
            		}
HXLINE(1907)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1911_closeSubState)
HXLINE(1912)		if (::PauseSubState_obj::goToOptions) {
HXLINE(1914)			::Debug_obj::logTrace(HX_("pause thingyt",1f,4a,55,3f),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1914,HX_("PlayState",5d,83,c2,46),HX_("closeSubState",49,18,32,04)));
HXLINE(1915)			if (::PauseSubState_obj::goBack) {
HXLINE(1917)				::Debug_obj::logTrace(HX_("pause thingyt",1f,4a,55,3f),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1917,HX_("PlayState",5d,83,c2,46),HX_("closeSubState",49,18,32,04)));
HXLINE(1918)				::PauseSubState_obj::goToOptions = false;
HXLINE(1919)				::PauseSubState_obj::goBack = false;
HXLINE(1920)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
            			}
            			else {
HXLINE(1923)				this->openSubState( ::OptionsMenu_obj::__alloc( HX_CTX ,true));
            			}
            		}
            		else {
HXLINE(1925)			if (this->paused) {
HXLINE(1927)				bool _hx_tmp;
HXDLIN(1927)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1927)					_hx_tmp = !(this->startingSong);
            				}
            				else {
HXLINE(1927)					_hx_tmp = false;
            				}
HXDLIN(1927)				if (_hx_tmp) {
HXLINE(1929)					this->resyncVocals();
            				}
HXLINE(1932)				if (!(this->startTimer->finished)) {
HXLINE(1933)					this->startTimer->active = true;
            				}
HXLINE(1934)				this->paused = false;
HXLINE(1937)				if (this->startTimer->finished) {
HXLINE(1939)					::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1939)					::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1946)					::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1939)					::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            				}
            				else {
HXLINE(1957)					::String _hx_tmp = this->detailsText;
HXDLIN(1957)					::String _hx_tmp1 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1957)					::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1957)					::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp2,this->iconRPC,null(),null());
            				}
            			}
            		}
HXLINE(1962)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1966_resyncVocals)
HXLINE(1967)		{
HXLINE(1967)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1967)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1968)		{
HXLINE(1968)			 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1968)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(1970)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1971)		this->vocals->play(null(),null(),null());
HXLINE(1972)		::flixel::FlxG_obj::sound->music->set_time((::Conductor_obj::songPosition * ::PlayState_obj::songMultiplier));
HXLINE(1973)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1976)		{
HXLINE(1979)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(1980)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1981)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(1986)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1986)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1993)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1986)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2021_update)
HXLINE(2020)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2023)		this->perfectMode = false;
HXLINE(2025)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2026)			::PlayState_obj::Stage->update(elapsed);
            		}
HXLINE(2028)		bool _hx_tmp;
HXDLIN(2028)		if (!(this->addedBotplay)) {
HXLINE(2028)			_hx_tmp = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2028)			_hx_tmp = false;
            		}
HXDLIN(2028)		if (_hx_tmp) {
HXLINE(2030)			::PlayStateChangeables_obj::botPlay = true;
HXLINE(2031)			this->addedBotplay = true;
HXLINE(2032)			this->add(this->botPlayState);
            		}
HXLINE(2035)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2037)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < (( (Float)(14000) ) * ::PlayState_obj::songMultiplier))) {
HXLINE(2039)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2040)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2043)				if (this->executeModchart) {
HXLINE(2045)					 ::LuaNote_obj::__alloc( HX_CTX ,dunceNote,this->currentLuaIndex);
HXLINE(2046)					dunceNote->luaID = this->currentLuaIndex;
            				}
HXLINE(2050)				if (this->executeModchart) {
HXLINE(2053)					if (!(dunceNote->isSustainNote)) {
HXLINE(2054)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNotes));
            					}
            					else {
HXLINE(2056)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camSustains));
            					}
            				}
            				else {
HXLINE(2061)					dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            				}
HXLINE(2064)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2065)				this->unspawnNotes->removeRange(index,1);
HXLINE(2066)				this->currentLuaIndex++;
            			}
            		}
HXLINE(2071)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2074)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2075)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2076)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2080)		if (this->generatedMusic) {
HXLINE(2082)			bool _hx_tmp;
HXDLIN(2082)			if (this->songStarted) {
HXLINE(2082)				_hx_tmp = !(this->endingSong);
            			}
            			else {
HXLINE(2082)				_hx_tmp = false;
            			}
HXDLIN(2082)			if (_hx_tmp) {
HXLINE(2087)				bool _hx_tmp;
HXDLIN(2087)				bool _hx_tmp1;
HXDLIN(2087)				if ((this->unspawnNotes->length == 0)) {
HXLINE(2087)					_hx_tmp1 = (this->notes->length == 0);
            				}
            				else {
HXLINE(2087)					_hx_tmp1 = false;
            				}
HXDLIN(2087)				if (_hx_tmp1) {
HXLINE(2087)					_hx_tmp = ((::flixel::FlxG_obj::sound->music->_time / ::PlayState_obj::songMultiplier) > (this->songLength - ( (Float)(100) )));
            				}
            				else {
HXLINE(2087)					_hx_tmp = false;
            				}
HXDLIN(2087)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer timer){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2094_update)
HXLINE(2094)						_gthis->endSong();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2089)					::Debug_obj::logTrace(HX_("we're fuckin ending the song ",b3,6b,87,93),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2089,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(2091)					this->endingSong = true;
HXLINE(2092)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            			}
            		}
HXLINE(2100)		if ((this->updateFrame == 4)) {
HXLINE(2102)			::TimingStruct_obj::clearTimings();
HXLINE(2104)			int currentIndex = 0;
HXLINE(2105)			{
HXLINE(2105)				int _g = 0;
HXDLIN(2105)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2105)				while((_g < _g1->length)){
HXLINE(2105)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2105)					_g = (_g + 1);
HXLINE(2107)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2109)						Float beat = i->position;
HXLINE(2111)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2113)						Float bpm = (i->value * ::PlayState_obj::songMultiplier);
HXLINE(2115)						::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE(2117)						if ((currentIndex != 0)) {
HXLINE(2119)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2120)							data->endBeat = beat;
HXLINE(2121)							data->length = (((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) ))) / ::PlayState_obj::songMultiplier);
HXLINE(2122)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2123)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor(((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step) / ::PlayState_obj::songMultiplier));
HXLINE(2124)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + (data->length / ::PlayState_obj::songMultiplier));
            						}
HXLINE(2127)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2131)			this->updateFrame++;
            		}
            		else {
HXLINE(2133)			if ((this->updateFrame != 5)) {
HXLINE(2134)				this->updateFrame++;
            			}
            		}
HXLINE(2136)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2138)			 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtBeat(this->curDecimalBeat);
HXLINE(2140)			if (::hx::IsNotNull( timingSeg )) {
HXLINE(2142)				Float timingSegBpm = timingSeg->bpm;
HXLINE(2144)				if ((timingSegBpm != ::Conductor_obj::bpm)) {
HXLINE(2147)					::Conductor_obj::changeBPM(timingSegBpm,false);
HXLINE(2148)					::Conductor_obj::crochet = (((( (Float)(60) ) / timingSegBpm) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(2149)					::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
            				}
            			}
HXLINE(2153)			Float newScroll = ((Float)1.0);
HXLINE(2155)			{
HXLINE(2155)				int _g = 0;
HXDLIN(2155)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2155)				while((_g < _g1->length)){
HXLINE(2155)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2155)					_g = (_g + 1);
HXLINE(2157)					if ((i->type == HX_("Scroll Speed Change",fc,2c,18,61))) {
HXLINE(2160)						bool _hx_tmp;
HXDLIN(2160)						if ((i->position <= this->curDecimalBeat)) {
HXLINE(2160)							_hx_tmp = !(this->pastScrollChanges->contains(i));
            						}
            						else {
HXLINE(2160)							_hx_tmp = false;
            						}
HXDLIN(2160)						if (_hx_tmp) {
HXLINE(2162)							this->pastScrollChanges->push(i);
HXLINE(2164)							newScroll = i->value;
            						}
            					}
            				}
            			}
HXLINE(2169)			if ((newScroll != 0)) {
HXLINE(2170)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayStateChangeables >();
HXDLIN(2170)				::PlayStateChangeables_obj::scrollSpeed = (::PlayStateChangeables_obj::scrollSpeed * newScroll);
            			}
            		}
HXLINE(2173)		bool _hx_tmp1;
HXDLIN(2173)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(2173)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2173)			_hx_tmp1 = _this->keyManager->checkStatus(49,_this->status);
            		}
            		else {
HXLINE(2173)			_hx_tmp1 = false;
            		}
HXDLIN(2173)		if (_hx_tmp1) {
HXLINE(2174)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(2176)		bool _hx_tmp2;
HXDLIN(2176)		bool _hx_tmp3;
HXDLIN(2176)		if (this->useVideo) {
HXLINE(2176)			_hx_tmp3 = ::hx::IsNotNull( ::GlobalVideo_obj::get() );
            		}
            		else {
HXLINE(2176)			_hx_tmp3 = false;
            		}
HXDLIN(2176)		if (_hx_tmp3) {
HXLINE(2176)			_hx_tmp2 = !(this->stopUpdate);
            		}
            		else {
HXLINE(2176)			_hx_tmp2 = false;
            		}
HXDLIN(2176)		if (_hx_tmp2) {
HXLINE(2178)			bool _hx_tmp;
HXDLIN(2178)			if (( (bool)(::GlobalVideo_obj::get()->__Field(HX_("ended",fa,48,7a,70),::hx::paccDynamic)) )) {
HXLINE(2178)				_hx_tmp = !(this->removedVideo);
            			}
            			else {
HXLINE(2178)				_hx_tmp = false;
            			}
HXDLIN(2178)			if (_hx_tmp) {
HXLINE(2180)				this->remove(this->videoSprite,null());
HXLINE(2181)				this->removedVideo = true;
            			}
            		}
HXLINE(2186)		bool _hx_tmp4;
HXDLIN(2186)		bool _hx_tmp5;
HXDLIN(2186)		if (this->executeModchart) {
HXLINE(2186)			_hx_tmp5 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(2186)			_hx_tmp5 = false;
            		}
HXDLIN(2186)		if (_hx_tmp5) {
HXLINE(2186)			_hx_tmp4 = this->songStarted;
            		}
            		else {
HXLINE(2186)			_hx_tmp4 = false;
            		}
HXDLIN(2186)		if (_hx_tmp4) {
HXLINE(2188)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(2189)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(2190)			 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2190)			_hx_tmp->setVar(HX_("curBeat",16,53,29,ac),::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3));
HXLINE(2191)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(2193)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(2195)			{
HXLINE(2195)				 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::PlayState_obj::luaModchart->luaWiggles);
HXDLIN(2195)				while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2195)					 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(2195)					::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(2195)					 ::WiggleEffect value = ( ( ::WiggleEffect)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(2198)					value->update(elapsed);
            				}
            			}
HXLINE(2201)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("downscroll",ef,45,d4,4f),HX_("bool",2a,84,1b,41))) );
HXLINE(2210)			 ::flixel::FlxCamera _hx_tmp1 = ::flixel::FlxG_obj::camera;
HXDLIN(2210)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(2211)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN(2211)			_hx_tmp2->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(2213)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(2215)				this->healthBarBG->set_visible(false);
HXLINE(2216)				this->kadeEngineWatermark->set_visible(false);
HXLINE(2217)				this->healthBar->set_visible(false);
HXLINE(2218)				this->iconP1->set_visible(false);
HXLINE(2219)				this->iconP2->set_visible(false);
HXLINE(2220)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(2224)				this->healthBarBG->set_visible(true);
HXLINE(2225)				this->kadeEngineWatermark->set_visible(true);
HXLINE(2226)				this->healthBar->set_visible(true);
HXLINE(2227)				this->iconP1->set_visible(true);
HXLINE(2228)				this->iconP2->set_visible(true);
HXLINE(2229)				this->scoreTxt->set_visible(true);
            			}
HXLINE(2232)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(2233)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(2235)			{
HXLINE(2236)				{
HXLINE(2237)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2238)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2239)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2236)				{
HXLINE(2237)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2238)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2239)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2236)				{
HXLINE(2237)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2238)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2239)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2236)				{
HXLINE(2237)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2238)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2239)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
            			}
HXLINE(2242)			this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2243)			this->camNotes->set_x(this->camHUD->x);
HXLINE(2244)			this->camNotes->set_y(this->camHUD->y);
HXLINE(2245)			this->camNotes->set_angle(this->camHUD->angle);
HXLINE(2246)			this->camSustains->set_zoom(this->camHUD->zoom);
HXLINE(2247)			this->camSustains->set_x(this->camHUD->x);
HXLINE(2248)			this->camSustains->set_y(this->camHUD->y);
HXLINE(2249)			this->camSustains->set_angle(this->camHUD->angle);
            		}
HXLINE(2256)		{
HXLINE(2257)			int balls = (this->notesHitArray->length - 1);
HXLINE(2258)			while((balls >= 0)){
HXLINE(2260)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(2261)				bool _hx_tmp;
HXDLIN(2261)				if (::hx::IsNotNull( cock )) {
HXLINE(2261)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(2261)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(2261)					_hx_tmp = false;
            				}
HXDLIN(2261)				if (_hx_tmp) {
HXLINE(2262)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(2264)					balls = 0;
            				}
HXLINE(2265)				balls = (balls - 1);
            			}
HXLINE(2267)			this->nps = this->notesHitArray->length;
HXLINE(2268)			if ((this->nps > this->maxNPS)) {
HXLINE(2269)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(2272)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2272)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(2273)			this->iconP1->swapOldIcon();
            		}
HXLINE(2275)		this->scoreTxt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(2277)		::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("pauseBind",d3,ab,7d,45),::hx::paccDynamic)) );
HXDLIN(2277)		s = s.toUpperCase();
HXDLIN(2277)		int pauseBind;
HXDLIN(2277)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(2277)			pauseBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE(2277)			pauseBind = -1;
            		}
HXLINE(2278)		::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("gppauseBind",8a,44,8f,3f),::hx::paccDynamic)) );
HXDLIN(2278)		s1 = s1.toUpperCase();
HXDLIN(2278)		int gppauseBind;
HXDLIN(2278)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(2278)			gppauseBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE(2278)			gppauseBind = -1;
            		}
HXLINE(2280)		bool _hx_tmp6;
HXDLIN(2280)		bool _hx_tmp7;
HXDLIN(2280)		bool _hx_tmp8;
HXDLIN(2280)		bool _hx_tmp9;
HXDLIN(2280)		if (!(::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,pauseBind),2))) {
HXLINE(2280)			if (::KeyBinds_obj::gamepad) {
HXLINE(2280)				_hx_tmp9 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,gppauseBind),2);
            			}
            			else {
HXLINE(2280)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE(2280)			_hx_tmp9 = true;
            		}
HXDLIN(2280)		if (_hx_tmp9) {
HXLINE(2280)			_hx_tmp8 = this->startedCountdown;
            		}
            		else {
HXLINE(2280)			_hx_tmp8 = false;
            		}
HXDLIN(2280)		if (_hx_tmp8) {
HXLINE(2280)			_hx_tmp7 = this->canPause;
            		}
            		else {
HXLINE(2280)			_hx_tmp7 = false;
            		}
HXDLIN(2280)		if (_hx_tmp7) {
HXLINE(2280)			_hx_tmp6 = !(this->cannotDie);
            		}
            		else {
HXLINE(2280)			_hx_tmp6 = false;
            		}
HXDLIN(2280)		if (_hx_tmp6) {
HXLINE(2285)			this->persistentUpdate = false;
HXLINE(2286)			this->persistentDraw = true;
HXLINE(2287)			this->paused = true;
HXLINE(2290)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(2293)				{
HXLINE(2293)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(2293)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2293)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2294)				this->clean();
            			}
            			else {
HXLINE(2297)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE(2300)		bool _hx_tmp10;
HXDLIN(2300)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2300)		if (_this1->keyManager->checkStatus(53,_this1->status)) {
HXLINE(2300)			_hx_tmp10 = this->songStarted;
            		}
            		else {
HXLINE(2300)			_hx_tmp10 = false;
            		}
HXDLIN(2300)		if (_hx_tmp10) {
HXLINE(2302)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2303)			if (this->useVideo) {
HXLINE(2305)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2306)				this->remove(this->videoSprite,null());
HXLINE(2307)				this->removedVideo = true;
            			}
HXLINE(2309)			this->cannotDie = true;
HXLINE(2311)			{
HXLINE(2311)				 ::flixel::FlxState nextState =  ::WaveformTestState_obj::__alloc( HX_CTX ,null());
HXDLIN(2311)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2311)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2312)			this->clean();
HXLINE(2313)			::PlayState_obj::stageTesting = false;
HXLINE(2314)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2315)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2317)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2319)				::PlayState_obj::luaModchart->die();
HXLINE(2320)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2325)		bool _hx_tmp11;
HXDLIN(2325)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2325)		if (_this2->keyManager->checkStatus(55,_this2->status)) {
HXLINE(2325)			_hx_tmp11 = this->songStarted;
            		}
            		else {
HXLINE(2325)			_hx_tmp11 = false;
            		}
HXDLIN(2325)		if (_hx_tmp11) {
HXLINE(2327)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2328)			if (this->useVideo) {
HXLINE(2330)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2331)				this->remove(this->videoSprite,null());
HXLINE(2332)				this->removedVideo = true;
            			}
HXLINE(2334)			this->cannotDie = true;
HXLINE(2336)			{
HXLINE(2336)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null());
HXDLIN(2336)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2336)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2337)			this->clean();
HXLINE(2338)			::PlayState_obj::stageTesting = false;
HXLINE(2339)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2340)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2342)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2344)				::PlayState_obj::luaModchart->die();
HXLINE(2345)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2353)		 ::HealthIcon _hx_tmp12 = this->iconP1;
HXDLIN(2353)		_hx_tmp12->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(2354)		 ::HealthIcon _hx_tmp13 = this->iconP2;
HXDLIN(2354)		_hx_tmp13->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(2356)		this->iconP1->updateHitbox();
HXLINE(2357)		this->iconP2->updateHitbox();
HXLINE(2359)		int iconOffset = 26;
HXLINE(2361)		 ::HealthIcon _hx_tmp14 = this->iconP1;
HXDLIN(2361)		Float _hx_tmp15 = this->healthBar->x;
HXDLIN(2361)		Float _hx_tmp16 = this->healthBar->get_width();
HXDLIN(2361)		_hx_tmp14->set_x((_hx_tmp15 + ((_hx_tmp16 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(2362)		 ::HealthIcon _hx_tmp17 = this->iconP2;
HXDLIN(2362)		Float _hx_tmp18 = this->healthBar->x;
HXDLIN(2362)		Float _hx_tmp19 = this->healthBar->get_width();
HXDLIN(2362)		Float _hx_tmp20 = (_hx_tmp18 + (_hx_tmp19 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(2362)		_hx_tmp17->set_x((_hx_tmp20 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(2364)		if ((this->health > 2)) {
HXLINE(2365)			this->health = ( (Float)(2) );
            		}
HXLINE(2366)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(2367)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2369)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2371)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(2372)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2374)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2495)		bool _hx_tmp21;
HXDLIN(2495)		if (this->skipActive) {
HXLINE(2495)			_hx_tmp21 = (::Conductor_obj::songPosition >= this->skipTo);
            		}
            		else {
HXLINE(2495)			_hx_tmp21 = false;
            		}
HXDLIN(2495)		if (_hx_tmp21) {
HXLINE(2497)			this->remove(this->skipText,null());
HXLINE(2498)			this->skipActive = false;
            		}
HXLINE(2501)		bool _hx_tmp22;
HXDLIN(2501)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2501)		if (_this3->keyManager->checkStatus(32,_this3->status)) {
HXLINE(2501)			_hx_tmp22 = this->skipActive;
            		}
            		else {
HXLINE(2501)			_hx_tmp22 = false;
            		}
HXDLIN(2501)		if (_hx_tmp22) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2516_update)
HXLINE(2516)				_gthis->remove(_gthis->skipText,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2503)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(2504)			this->vocals->pause();
HXLINE(2505)			::Conductor_obj::songPosition = this->skipTo;
HXLINE(2506)			::Conductor_obj::rawPosition = this->skipTo;
HXLINE(2508)			::flixel::FlxG_obj::sound->music->set_time(::Conductor_obj::songPosition);
HXLINE(2509)			::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2511)			this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(2512)			this->vocals->play(null(),null(),null());
HXLINE(2513)			::flixel::tweens::FlxTween_obj::tween(this->skipText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
HXLINE(2519)			this->skipActive = false;
            		}
HXLINE(2522)		if (this->startingSong) {
HXLINE(2524)			if (this->startedCountdown) {
HXLINE(2526)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2526)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2527)				::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE(2528)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2529)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2535)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2535)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2536)			::Conductor_obj::rawPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2541)			this->songPositionBar = ((::Conductor_obj::songPosition - this->songLength) / ( (Float)(1000) ));
HXLINE(2543)			this->currentSection = this->getSectionByTime(::Conductor_obj::songPosition);
HXLINE(2545)			if (!(this->paused)) {
HXLINE(2547)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2547)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2548)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2551)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2553)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2554)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
HXLINE(2559)				Float curTime = (::flixel::FlxG_obj::sound->music->_time / ::PlayState_obj::songMultiplier);
HXLINE(2560)				if ((curTime < 0)) {
HXLINE(2561)					curTime = ( (Float)(0) );
            				}
HXLINE(2563)				int secondsTotal = ::Math_obj::floor(((curTime - this->songLength) / ( (Float)(1000) )));
HXLINE(2564)				if ((secondsTotal < 0)) {
HXLINE(2565)					secondsTotal = 0;
            				}
HXLINE(2567)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(2568)					 ::flixel::text::FlxText _hx_tmp = this->songName;
HXDLIN(2568)					::String _hx_tmp1 = ( (::String)((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00))) );
HXDLIN(2568)					_hx_tmp->set_text(((_hx_tmp1 + ::flixel::util::FlxStringUtil_obj::formatTime((this->songLength - ( (Float)(secondsTotal) )),false)) + HX_(")",29,00,00,00)));
            				}
            			}
            		}
HXLINE(2574)		bool _hx_tmp23;
HXDLIN(2574)		if (this->generatedMusic) {
HXLINE(2574)			_hx_tmp23 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(2574)			_hx_tmp23 = false;
            		}
HXDLIN(2574)		if (_hx_tmp23) {
HXLINE(2577)			if (this->allowedToCheer) {
HXLINE(2580)				bool _hx_tmp;
HXDLIN(2580)				bool _hx_tmp1;
HXDLIN(2580)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2580)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2580)					_hx_tmp1 = true;
            				}
HXDLIN(2580)				if (!(_hx_tmp1)) {
HXLINE(2580)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2580)					_hx_tmp = true;
            				}
HXDLIN(2580)				if (_hx_tmp) {
HXLINE(2585)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(2628)						bool _hx_tmp;
HXDLIN(2628)						if ((this->curBeat > 30)) {
HXLINE(2628)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(2628)							_hx_tmp = false;
            						}
HXDLIN(2628)						if (_hx_tmp) {
HXLINE(2630)							bool _hx_tmp;
HXDLIN(2630)							if ((this->curBeat >= 90)) {
HXLINE(2630)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(2630)								_hx_tmp = true;
            							}
HXDLIN(2630)							if (_hx_tmp) {
HXLINE(2632)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(2634)									if (!(this->triggeredAlready)) {
HXLINE(2636)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2637)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2641)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2628)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(2612)						bool _hx_tmp;
HXDLIN(2612)						if ((this->curBeat > 5)) {
HXLINE(2612)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(2612)							_hx_tmp = false;
            						}
HXDLIN(2612)						if (_hx_tmp) {
HXLINE(2614)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2616)								if (!(this->triggeredAlready)) {
HXLINE(2618)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2619)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2623)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2612)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(2647)						if ((this->curBeat < 170)) {
HXLINE(2649)							bool _hx_tmp;
HXDLIN(2649)							if ((this->curBeat >= 65)) {
HXLINE(2649)								if ((this->curBeat > 130)) {
HXLINE(2649)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(2649)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(2649)								_hx_tmp = true;
            							}
HXDLIN(2649)							if (_hx_tmp) {
HXLINE(2651)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2653)									if (!(this->triggeredAlready)) {
HXLINE(2655)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2656)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2660)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2647)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(2666)						bool _hx_tmp;
HXDLIN(2666)						bool _hx_tmp1;
HXDLIN(2666)						if ((this->curBeat > 10)) {
HXLINE(2666)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(2666)							_hx_tmp1 = false;
            						}
HXDLIN(2666)						if (_hx_tmp1) {
HXLINE(2666)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(2666)							_hx_tmp = false;
            						}
HXDLIN(2666)						if (_hx_tmp) {
HXLINE(2668)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2670)								if (!(this->triggeredAlready)) {
HXLINE(2672)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2673)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2677)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2666)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(2590)						if ((this->curBeat < 250)) {
HXLINE(2593)							bool _hx_tmp;
HXDLIN(2593)							if ((this->curBeat != 184)) {
HXLINE(2593)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2593)								_hx_tmp = false;
            							}
HXDLIN(2593)							if (_hx_tmp) {
HXLINE(2595)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(2598)									if (!(this->triggeredAlready)) {
HXLINE(2600)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2601)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2605)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2590)						goto _hx_goto_86;
            					}
            					_hx_goto_86:;
            				}
            			}
HXLINE(2685)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2686)				::PlayState_obj::luaModchart->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(2689)			bool _hx_tmp;
HXDLIN(2689)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(2689)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(2689)				_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2689)				_hx_tmp = false;
            			}
HXDLIN(2689)			if (_hx_tmp) {
HXLINE(2691)				int offsetX = 0;
HXLINE(2692)				int offsetY = 0;
HXLINE(2694)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2696)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2697)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2700)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2700)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(2700)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2702)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2703)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2707)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ||  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE(2710)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2710)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(2710)					goto _hx_goto_87;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(2712)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2712)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2713)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2713)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2711)					goto _hx_goto_87;
            				}
            				_hx_goto_87:;
            			}
HXLINE(2717)			bool _hx_tmp2;
HXDLIN(2717)			if (( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2717)				Float _hx_tmp = this->camFollow->x;
HXDLIN(2717)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(2717)				_hx_tmp2 = false;
            			}
HXDLIN(2717)			if (_hx_tmp2) {
HXLINE(2719)				int offsetX = 0;
HXLINE(2720)				int offsetY = 0;
HXLINE(2722)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2724)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2725)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2728)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2728)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(2728)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2731)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2732)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2734)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2735)					::String _hx_switch_2 = ::PlayState_obj::Stage->curStage;
            					if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(2738)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2738)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(2738)						goto _hx_goto_88;
            					}
            					if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(2740)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2740)						_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(2740)						goto _hx_goto_88;
            					}
            					if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(2742)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2742)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2743)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2743)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2741)						goto _hx_goto_88;
            					}
            					if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(2745)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2745)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2746)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2746)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2744)						goto _hx_goto_88;
            					}
            					_hx_goto_88:;
            				}
            			}
            		}
HXLINE(2751)		if (this->camZooming) {
HXLINE(2753)			if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)0.8) )) {
HXLINE(2754)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)0.8),::hx::paccDynamic);
            			}
HXLINE(2756)			if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)1.2) )) {
HXLINE(2757)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)1.2),::hx::paccDynamic);
            			}
HXLINE(2759)			if (!(this->executeModchart)) {
HXLINE(2761)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2761)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2762)				Float a1 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXDLIN(2762)				this->camHUD->set_zoom((a1 + (((Float)0.95) * (this->camHUD->zoom - a1))));
HXLINE(2764)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2765)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            			else {
HXLINE(2769)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2769)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2770)				this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
HXLINE(2772)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2773)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            		}
HXLINE(2781)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(2783)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(2786)					this->camZooming = true;
HXLINE(2787)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(2789)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(2791)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(2793)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(2800)		bool _hx_tmp24;
HXDLIN(2800)		if ((this->health <= 0)) {
HXLINE(2800)			_hx_tmp24 = !(this->cannotDie);
            		}
            		else {
HXLINE(2800)			_hx_tmp24 = false;
            		}
HXDLIN(2800)		if (_hx_tmp24) {
HXLINE(2802)			if (!(this->usedTimeTravel)) {
HXLINE(2804)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2806)				this->persistentUpdate = false;
HXLINE(2807)				this->persistentDraw = false;
HXLINE(2808)				this->paused = true;
HXLINE(2810)				{
HXLINE(2810)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2810)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2811)				{
HXLINE(2811)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2811)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2813)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2815)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2815)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2815)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2819)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2819)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2824)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2824)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2830)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2824)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            			else {
HXLINE(2841)				this->health = ( (Float)(1) );
            			}
            		}
HXLINE(2843)		bool _hx_tmp25;
HXDLIN(2843)		if (!(this->inCutscene)) {
HXLINE(2843)			_hx_tmp25 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2843)			_hx_tmp25 = false;
            		}
HXDLIN(2843)		if (_hx_tmp25) {
HXLINE(2845)			::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("resetBind",2c,ff,02,87),::hx::paccDynamic)) );
HXDLIN(2845)			s = s.toUpperCase();
HXDLIN(2845)			int resetBind;
HXDLIN(2845)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(2845)				resetBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE(2845)				resetBind = -1;
            			}
HXLINE(2846)			::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("gpresetBind",e3,97,14,81),::hx::paccDynamic)) );
HXDLIN(2846)			s1 = s1.toUpperCase();
HXDLIN(2846)			int gpresetBind;
HXDLIN(2846)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(2846)				gpresetBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            			}
            			else {
HXLINE(2846)				gpresetBind = -1;
            			}
HXLINE(2847)			bool _hx_tmp;
HXDLIN(2847)			if (!(::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,resetBind),2))) {
HXLINE(2847)				if (::KeyBinds_obj::gamepad) {
HXLINE(2847)					_hx_tmp = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,gpresetBind),2);
            				}
            				else {
HXLINE(2847)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(2847)				_hx_tmp = true;
            			}
HXDLIN(2847)			if (_hx_tmp) {
HXLINE(2849)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2851)				this->persistentUpdate = false;
HXLINE(2852)				this->persistentDraw = false;
HXLINE(2853)				this->paused = true;
HXLINE(2855)				{
HXLINE(2855)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2855)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2856)				{
HXLINE(2856)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2856)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2858)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2860)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2860)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2860)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2864)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2864)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2869)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2869)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2875)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2869)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            		}
HXLINE(2887)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis,Float,stepHeight1,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2893_update)
HXLINE(2897)				if (!(daNote->modifiedByLua)) {
HXLINE(2899)					if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(2901)						if (daNote->mustPress) {
HXLINE(2902)							 ::Note daNote1 = daNote;
HXDLIN(2902)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2904)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(2904)							Float _hx_tmp2;
HXDLIN(2904)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2904)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2904)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2902)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2902)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
            						else {
HXLINE(2908)							 ::Note daNote1 = daNote;
HXDLIN(2908)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2910)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(2910)							Float _hx_tmp2;
HXDLIN(2910)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2910)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2910)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2908)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2908)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
HXLINE(2913)						if (daNote->isSustainNote) {
HXLINE(2915)							{
HXLINE(2915)								 ::Note _g = daNote;
HXDLIN(2915)								Float _g1 = _g->y;
HXDLIN(2915)								Float _hx_tmp = daNote->get_height();
HXDLIN(2915)								_g->set_y((_g1 - (_hx_tmp - stepHeight1)));
            							}
HXLINE(2918)							bool _hx_tmp1;
HXDLIN(2918)							bool _hx_tmp2;
HXDLIN(2918)							bool _hx_tmp3;
HXDLIN(2918)							bool _hx_tmp4;
HXDLIN(2918)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(2918)								_hx_tmp4 = !(daNote->mustPress);
            							}
            							else {
HXLINE(2918)								_hx_tmp4 = true;
            							}
HXDLIN(2918)							if (!(_hx_tmp4)) {
HXLINE(2918)								_hx_tmp3 = daNote->wasGoodHit;
            							}
            							else {
HXLINE(2918)								_hx_tmp3 = true;
            							}
HXDLIN(2918)							if (!(_hx_tmp3)) {
HXLINE(2918)								_hx_tmp2 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            							}
            							else {
HXLINE(2918)								_hx_tmp2 = true;
            							}
HXDLIN(2918)							if (_hx_tmp2) {
HXLINE(2922)								Float _hx_tmp = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(2922)								Float _hx_tmp2 = (_hx_tmp + daNote->get_height());
HXLINE(2918)								_hx_tmp1 = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            							}
            							else {
HXLINE(2918)								_hx_tmp1 = false;
            							}
HXDLIN(2918)							if (_hx_tmp1) {
HXLINE(2925)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(2926)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2929)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(2931)								daNote->set_clipRect(swagRect);
            							}
            						}
HXLINE(2935)						if (daNote->isParent) {
HXLINE(2937)							int _g = 0;
HXDLIN(2937)							int _g1 = daNote->children->length;
HXDLIN(2937)							while((_g < _g1)){
HXLINE(2937)								_g = (_g + 1);
HXDLIN(2937)								int i = (_g - 1);
HXLINE(2939)								 ::Note slide = daNote->children->__get(i).StaticCast<  ::Note >();
HXLINE(2940)								Float daNote1 = daNote->y;
HXDLIN(2940)								slide->set_y((daNote1 - slide->get_height()));
            							}
            						}
            					}
            					else {
HXLINE(2946)						if (daNote->mustPress) {
HXLINE(2947)							 ::Note daNote1 = daNote;
HXDLIN(2947)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2948)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(2948)							Float _hx_tmp2;
HXDLIN(2948)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2948)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2948)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2947)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2947)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
            						else {
HXLINE(2952)							 ::Note daNote1 = daNote;
HXDLIN(2952)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2953)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(2953)							Float _hx_tmp2;
HXDLIN(2953)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2953)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2953)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2952)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2952)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
HXLINE(2956)						if (daNote->isSustainNote) {
HXLINE(2958)							bool _hx_tmp;
HXDLIN(2958)							bool _hx_tmp1;
HXDLIN(2958)							bool _hx_tmp2;
HXDLIN(2958)							bool _hx_tmp3;
HXDLIN(2958)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(2958)								_hx_tmp3 = !(daNote->mustPress);
            							}
            							else {
HXLINE(2958)								_hx_tmp3 = true;
            							}
HXDLIN(2958)							if (!(_hx_tmp3)) {
HXLINE(2958)								_hx_tmp2 = daNote->wasGoodHit;
            							}
            							else {
HXLINE(2958)								_hx_tmp2 = true;
            							}
HXDLIN(2958)							if (!(_hx_tmp2)) {
HXLINE(2958)								_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            							}
            							else {
HXLINE(2958)								_hx_tmp1 = true;
            							}
HXDLIN(2958)							if (_hx_tmp1) {
HXLINE(2958)								_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            							}
            							else {
HXLINE(2958)								_hx_tmp = false;
            							}
HXDLIN(2958)							if (_hx_tmp) {
HXLINE(2965)								Float swagRect = daNote->get_width();
HXDLIN(2965)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(2965)								Float swagRect2 = daNote->get_height();
HXDLIN(2965)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(2966)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2969)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(2969)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(2971)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(2977)				bool _hx_tmp;
HXDLIN(2977)				if (!(daNote->mustPress)) {
HXLINE(2977)					_hx_tmp = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(2977)					_hx_tmp = false;
            				}
HXDLIN(2977)				if (_hx_tmp) {
HXLINE(2979)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("tutorial",9e,8f,b5,82) )) {
HXLINE(2980)						_gthis->camZooming = true;
            					}
HXLINE(2982)					::String altAnim = HX_("",00,00,00,00);
HXLINE(2984)					if (daNote->isAlt) {
HXLINE(2986)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
HXLINE(2991)					bool _hx_tmp;
HXDLIN(2991)					if (!(daNote->isParent)) {
HXLINE(2991)						_hx_tmp = ::hx::IsNotNull( daNote->parent );
            					}
            					else {
HXLINE(2991)						_hx_tmp = false;
            					}
HXDLIN(2991)					if (_hx_tmp) {
HXLINE(2993)						if ((daNote->spotInLine != (daNote->parent->children->length - 1))) {
HXLINE(2995)							int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(2996)							::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(2998)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            								void _hx_run( ::StaticArrow spr){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3002_update)
HXLINE(3002)									_gthis->pressArrow(spr,spr->ID,daNote);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(3000)								::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_2(_gthis,daNote)),null());
            							}
HXLINE(3017)							if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3018)								::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            							}
HXLINE(3021)							::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3023)							if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3024)								_gthis->vocals->set_volume(( (Float)(1) ));
            							}
            						}
            					}
            					else {
HXLINE(3029)						int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3030)						::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3032)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3036_update)
HXLINE(3036)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3034)							::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis,daNote)),null());
            						}
HXLINE(3051)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3052)							::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            						}
HXLINE(3055)						::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3057)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3058)							_gthis->vocals->set_volume(( (Float)(1) ));
            						}
            					}
HXLINE(3060)					daNote->set_active(false);
HXLINE(3062)					daNote->kill();
HXLINE(3063)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3064)					daNote->destroy();
            				}
HXLINE(3067)				bool _hx_tmp1;
HXDLIN(3067)				if (daNote->mustPress) {
HXLINE(3067)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(3067)					_hx_tmp1 = false;
            				}
HXDLIN(3067)				if (_hx_tmp1) {
HXLINE(3069)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3070)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3071)					if (!(daNote->isSustainNote)) {
HXLINE(3072)						daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
HXLINE(3073)					if (daNote->sustainActive) {
HXLINE(3075)						if (_gthis->executeModchart) {
HXLINE(3076)							daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            						}
            					}
HXLINE(3078)					daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            				}
            				else {
HXLINE(3080)					bool _hx_tmp;
HXDLIN(3080)					if (!(daNote->wasGoodHit)) {
HXLINE(3080)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(3080)						_hx_tmp = false;
            					}
HXDLIN(3080)					if (_hx_tmp) {
HXLINE(3082)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3083)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3084)						if (!(daNote->isSustainNote)) {
HXLINE(3085)							daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            						}
HXLINE(3086)						if (daNote->sustainActive) {
HXLINE(3088)							if (_gthis->executeModchart) {
HXLINE(3089)								daNote->set_alpha(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            							}
            						}
HXLINE(3091)						daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
            				}
HXLINE(3094)				bool _hx_tmp2;
HXDLIN(3094)				bool _hx_tmp3;
HXDLIN(3094)				if (!(daNote->mustPress)) {
HXLINE(3094)					_hx_tmp3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(3094)					_hx_tmp3 = false;
            				}
HXDLIN(3094)				if (_hx_tmp3) {
HXLINE(3094)					_hx_tmp2 = !(_gthis->executeModchart);
            				}
            				else {
HXLINE(3094)					_hx_tmp2 = false;
            				}
HXDLIN(3094)				if (_hx_tmp2) {
HXLINE(3095)					daNote->set_alpha(( (Float)(0) ));
            				}
HXLINE(3097)				if (daNote->isSustainNote) {
HXLINE(3099)					{
HXLINE(3099)						 ::Note _g = daNote;
HXDLIN(3099)						Float _g1 = _g->x;
HXDLIN(3099)						_g->set_x((_g1 + ((daNote->get_width() / ( (Float)(2) )) + 20)));
            					}
HXLINE(3100)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3101)						 ::Note _g = daNote;
HXDLIN(3101)						_g->set_x((_g->x - ( (Float)(11) )));
            					}
            				}
HXLINE(3108)				bool _hx_tmp4;
HXDLIN(3108)				bool _hx_tmp5;
HXDLIN(3108)				if (daNote->isSustainNote) {
HXLINE(3108)					_hx_tmp5 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3108)					_hx_tmp5 = false;
            				}
HXDLIN(3108)				if (_hx_tmp5) {
HXLINE(3108)					_hx_tmp4 = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3108)					_hx_tmp4 = false;
            				}
HXDLIN(3108)				if (_hx_tmp4) {
HXLINE(3110)					daNote->kill();
HXLINE(3111)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3112)					daNote->destroy();
            				}
            				else {
HXLINE(3114)					bool _hx_tmp;
HXDLIN(3114)					bool _hx_tmp1;
HXDLIN(3114)					bool _hx_tmp2;
HXDLIN(3114)					bool _hx_tmp3;
HXDLIN(3114)					bool _hx_tmp4;
HXDLIN(3114)					if (daNote->mustPress) {
HXLINE(3114)						_hx_tmp4 = !(::PlayStateChangeables_obj::useDownscroll);
            					}
            					else {
HXLINE(3114)						_hx_tmp4 = false;
            					}
HXDLIN(3114)					if (!(_hx_tmp4)) {
HXLINE(3114)						if (daNote->mustPress) {
HXLINE(3114)							_hx_tmp3 = ::PlayStateChangeables_obj::useDownscroll;
            						}
            						else {
HXLINE(3114)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(3114)						_hx_tmp3 = true;
            					}
HXDLIN(3114)					if (_hx_tmp3) {
HXLINE(3114)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(3114)						_hx_tmp2 = false;
            					}
HXDLIN(3114)					if (_hx_tmp2) {
HXLINE(3114)						_hx_tmp1 = (((daNote->strumTime / ::PlayState_obj::songMultiplier) - (::Conductor_obj::songPosition / ::PlayState_obj::songMultiplier)) < -((( (Float)(166) ) * ::Conductor_obj::timeScale)));
            					}
            					else {
HXLINE(3114)						_hx_tmp1 = false;
            					}
HXDLIN(3114)					if (_hx_tmp1) {
HXLINE(3114)						_hx_tmp = _gthis->songStarted;
            					}
            					else {
HXLINE(3114)						_hx_tmp = false;
            					}
HXDLIN(3114)					if (_hx_tmp) {
HXLINE(3119)						bool _hx_tmp;
HXDLIN(3119)						if (daNote->isSustainNote) {
HXLINE(3119)							_hx_tmp = daNote->wasGoodHit;
            						}
            						else {
HXLINE(3119)							_hx_tmp = false;
            						}
HXDLIN(3119)						if (_hx_tmp) {
HXLINE(3121)							daNote->kill();
HXLINE(3122)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(3126)							bool _hx_tmp;
HXDLIN(3126)							if (::PlayState_obj::loadRep) {
HXLINE(3126)								_hx_tmp = daNote->isSustainNote;
            							}
            							else {
HXLINE(3126)								_hx_tmp = false;
            							}
HXDLIN(3126)							if (_hx_tmp) {
HXLINE(3129)								if (::hx::IsNotNull( _gthis->findByTime(daNote->strumTime) )) {
HXLINE(3130)									 ::PlayState _gthis1 = _gthis;
HXDLIN(3130)									_gthis1->totalNotesHit = (_gthis1->totalNotesHit + 1);
            								}
            								else {
HXLINE(3133)									_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3134)									bool _hx_tmp;
HXDLIN(3134)									if (::PlayState_obj::theFunne) {
HXLINE(3134)										_hx_tmp = !(daNote->isSustainNote);
            									}
            									else {
HXLINE(3134)										_hx_tmp = false;
            									}
HXDLIN(3134)									if (_hx_tmp) {
HXLINE(3136)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
HXLINE(3138)									if (daNote->isParent) {
HXLINE(3140)										 ::PlayState _gthis1 = _gthis;
HXDLIN(3140)										_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3142)										{
HXLINE(3142)											int _g = 0;
HXDLIN(3142)											::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3142)											while((_g < _g1->length)){
HXLINE(3142)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3142)												_g = (_g + 1);
HXLINE(3144)												i->set_alpha(((Float)0.3));
HXLINE(3145)												i->sustainActive = false;
            											}
            										}
            									}
            									else {
HXLINE(3150)										bool _hx_tmp;
HXDLIN(3150)										bool _hx_tmp1;
HXDLIN(3150)										bool _hx_tmp2;
HXDLIN(3150)										if (!(daNote->wasGoodHit)) {
HXLINE(3150)											_hx_tmp2 = daNote->isSustainNote;
            										}
            										else {
HXLINE(3150)											_hx_tmp2 = false;
            										}
HXDLIN(3150)										if (_hx_tmp2) {
HXLINE(3150)											_hx_tmp1 = daNote->sustainActive;
            										}
            										else {
HXLINE(3150)											_hx_tmp1 = false;
            										}
HXDLIN(3150)										if (_hx_tmp1) {
HXLINE(3150)											_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            										}
            										else {
HXLINE(3150)											_hx_tmp = false;
            										}
HXDLIN(3150)										if (_hx_tmp) {
HXLINE(3157)											{
HXLINE(3157)												int _g = 0;
HXDLIN(3157)												::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3157)												while((_g < _g1->length)){
HXLINE(3157)													 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3157)													_g = (_g + 1);
HXLINE(3159)													i->set_alpha(((Float)0.3));
HXLINE(3160)													i->sustainActive = false;
            												}
            											}
HXLINE(3162)											if (daNote->parent->wasGoodHit) {
HXLINE(3164)												::PlayState_obj::misses++;
HXLINE(3165)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3165)												_gthis1->totalNotesHit = (_gthis1->totalNotesHit - ( (Float)(1) ));
            											}
HXLINE(3167)											_gthis->updateAccuracy();
            										}
            										else {
HXLINE(3169)											bool _hx_tmp;
HXDLIN(3169)											if (!(daNote->wasGoodHit)) {
HXLINE(3169)												_hx_tmp = !(daNote->isSustainNote);
            											}
            											else {
HXLINE(3169)												_hx_tmp = false;
            											}
HXDLIN(3169)											if (_hx_tmp) {
HXLINE(3171)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3171)												_gthis1->health = (_gthis1->health - ((Float)0.15));
            											}
            										}
            									}
            								}
            							}
            							else {
HXLINE(3178)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3179)								bool _hx_tmp;
HXDLIN(3179)								if (::PlayState_obj::theFunne) {
HXLINE(3179)									_hx_tmp = !(daNote->isSustainNote);
            								}
            								else {
HXLINE(3179)									_hx_tmp = false;
            								}
HXDLIN(3179)								if (_hx_tmp) {
HXLINE(3181)									if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3183)										daNote->rating = HX_("bad",c5,b1,4a,00);
HXLINE(3184)										_gthis->goodNoteHit(daNote,null());
            									}
            									else {
HXLINE(3187)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
            								}
HXLINE(3190)								bool _hx_tmp1;
HXDLIN(3190)								if (daNote->isParent) {
HXLINE(3190)									_hx_tmp1 = daNote->visible;
            								}
            								else {
HXLINE(3190)									_hx_tmp1 = false;
            								}
HXDLIN(3190)								if (_hx_tmp1) {
HXLINE(3192)									 ::PlayState _gthis1 = _gthis;
HXDLIN(3192)									_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3194)									{
HXLINE(3194)										int _g = 0;
HXDLIN(3194)										::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3194)										while((_g < _g1->length)){
HXLINE(3194)											 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3194)											_g = (_g + 1);
HXLINE(3196)											i->set_alpha(((Float)0.3));
HXLINE(3197)											i->sustainActive = false;
            										}
            									}
            								}
            								else {
HXLINE(3202)									bool _hx_tmp;
HXDLIN(3202)									bool _hx_tmp1;
HXDLIN(3202)									bool _hx_tmp2;
HXDLIN(3202)									if (!(daNote->wasGoodHit)) {
HXLINE(3202)										_hx_tmp2 = daNote->isSustainNote;
            									}
            									else {
HXLINE(3202)										_hx_tmp2 = false;
            									}
HXDLIN(3202)									if (_hx_tmp2) {
HXLINE(3202)										_hx_tmp1 = daNote->sustainActive;
            									}
            									else {
HXLINE(3202)										_hx_tmp1 = false;
            									}
HXDLIN(3202)									if (_hx_tmp1) {
HXLINE(3202)										_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            									}
            									else {
HXLINE(3202)										_hx_tmp = false;
            									}
HXDLIN(3202)									if (_hx_tmp) {
HXLINE(3209)										{
HXLINE(3209)											int _g = 0;
HXDLIN(3209)											::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3209)											while((_g < _g1->length)){
HXLINE(3209)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3209)												_g = (_g + 1);
HXLINE(3211)												i->set_alpha(((Float)0.3));
HXLINE(3212)												i->sustainActive = false;
            											}
            										}
HXLINE(3214)										if (daNote->parent->wasGoodHit) {
HXLINE(3216)											::PlayState_obj::misses++;
HXLINE(3217)											 ::PlayState _gthis1 = _gthis;
HXDLIN(3217)											_gthis1->totalNotesHit = (_gthis1->totalNotesHit - ( (Float)(1) ));
            										}
HXLINE(3219)										_gthis->updateAccuracy();
            									}
            									else {
HXLINE(3221)										bool _hx_tmp;
HXDLIN(3221)										if (!(daNote->wasGoodHit)) {
HXLINE(3221)											_hx_tmp = !(daNote->isSustainNote);
            										}
            										else {
HXLINE(3221)											_hx_tmp = false;
            										}
HXDLIN(3221)										if (_hx_tmp) {
HXLINE(3223)											 ::PlayState _gthis1 = _gthis;
HXDLIN(3223)											_gthis1->health = (_gthis1->health - ((Float)0.15));
            										}
            									}
            								}
            							}
            						}
HXLINE(3229)						daNote->set_visible(false);
HXLINE(3230)						daNote->kill();
HXLINE(3231)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2889)			bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(2889)			bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(2889)			bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(2889)			::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(2890)			Float stepHeight = (((Float)0.45) * ::Conductor_obj::stepCrochet);
HXDLIN(2890)			Float stepHeight1 = (stepHeight * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2));
HXLINE(2892)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_4(_gthis,stepHeight1,holdArray3)),null());
            		}
HXLINE(3236)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3240_update)
HXLINE(3240)				if (spr->animation->get_finished()) {
HXLINE(3242)					spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(3243)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3238)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_5()),null());
            		}
HXLINE(3248)		bool _hx_tmp26;
HXDLIN(3248)		if (!(this->inCutscene)) {
HXLINE(3248)			_hx_tmp26 = this->songStarted;
            		}
            		else {
HXLINE(3248)			_hx_tmp26 = false;
            		}
HXDLIN(3248)		if (_hx_tmp26) {
HXLINE(3249)			this->keyShit();
            		}
HXLINE(3256)		this->super::update(elapsed);
            	}


 ::Dynamic PlayState_obj::getSectionByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3260_getSectionByTime)
HXLINE(3261)		{
HXLINE(3261)			int _g = 0;
HXDLIN(3261)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3261)			while((_g < _g1->length)){
HXLINE(3261)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3261)				_g = (_g + 1);
HXLINE(3263)				Float start = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) )));
HXLINE(3264)				Float end = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic)) )));
HXLINE(3266)				bool _hx_tmp;
HXDLIN(3266)				if ((ms >= start)) {
HXLINE(3266)					_hx_tmp = (ms < end);
            				}
            				else {
HXLINE(3266)					_hx_tmp = false;
            				}
HXDLIN(3266)				if (_hx_tmp) {
HXLINE(3268)					return i;
            				}
            			}
            		}
HXLINE(3272)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getSectionByTime,return )

void PlayState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3279_recalculateAllSectionTimes)
HXDLIN(3279)		int _g = 0;
HXDLIN(3279)		int _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3279)		while((_g < _g1)){
HXDLIN(3279)			_g = (_g + 1);
HXDLIN(3279)			int i = (_g - 1);
HXLINE(3281)			 ::Dynamic section =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3283)			int currentBeat = (4 * i);
HXLINE(3285)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3287)			if (::hx::IsNull( currentSeg )) {
HXLINE(3288)				return;
            			}
HXLINE(3290)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3292)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3294)			if ((i != 0)) {
HXLINE(3295)				 ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3296)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,recalculateAllSectionTimes,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3301_endSong)
HXLINE(3300)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3302)		this->endingSong = true;
HXLINE(3303)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(3304)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(3305)		if (this->useVideo) {
HXLINE(3307)			::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(3308)			::PlayState_obj::instance->remove(::PlayState_obj::instance->videoSprite,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3311)		if (!(::PlayState_obj::loadRep)) {
HXLINE(3312)			::PlayState_obj::rep->SaveReplay(this->saveNotes,this->saveJudge,this->replayAna);
            		}
            		else {
HXLINE(3315)			::PlayStateChangeables_obj::botPlay = false;
HXLINE(3316)			::PlayStateChangeables_obj::scrollSpeed = (( (Float)(1) ) / ::PlayState_obj::songMultiplier);
HXLINE(3317)			::PlayStateChangeables_obj::useDownscroll = false;
            		}
HXLINE(3320)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(3321)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(3324)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3326)			::PlayState_obj::luaModchart->die();
HXLINE(3327)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(3331)		this->canPause = false;
HXLINE(3332)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(3333)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(3334)		{
HXLINE(3334)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3334)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(3335)		{
HXLINE(3335)			 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3335)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(3336)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3339)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
HXLINE(3340)			::String _hx_tmp = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXDLIN(3340)			::String _hx_tmp1 = ::Ratings_obj::GenerateLetterRank(this->accuracy);
HXDLIN(3340)			::Highscore_obj::saveCombo(_hx_tmp,_hx_tmp1,::PlayState_obj::storyDifficulty);
            		}
HXLINE(3344)		if (::PlayState_obj::offsetTesting) {
HXLINE(3346)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3346)			::String library = null();
HXDLIN(3346)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3347)			::PlayState_obj::offsetTesting = false;
HXLINE(3348)			{
HXLINE(3348)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null())) ),false);
HXDLIN(3348)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3348)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(3349)			this->clean();
HXLINE(3350)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(3352)			if (::PlayState_obj::stageTesting) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3355_endSong)
HXLINE(3356)					{
HXLINE(3356)						int _g = 0;
HXDLIN(3356)						::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN(3356)						while((_g < _g1->get_length())){
HXLINE(3356)							 ::Dynamic bg = _g1->__get(_g);
HXDLIN(3356)							_g = (_g + 1);
HXLINE(3358)							_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
HXLINE(3360)					{
HXLINE(3360)						int _g2 = 0;
HXDLIN(3360)						::Array< ::Dynamic> _g3 = ::PlayState_obj::Stage->layInFront;
HXDLIN(3360)						while((_g2 < _g3->length)){
HXLINE(3360)							::Array< ::Dynamic> array = _g3->__get(_g2).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(3360)							_g2 = (_g2 + 1);
HXLINE(3362)							{
HXLINE(3362)								int _g = 0;
HXDLIN(3362)								while((_g < array->length)){
HXLINE(3362)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3362)									_g = (_g + 1);
HXLINE(3363)									_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            								}
            							}
            						}
            					}
HXLINE(3365)					_gthis->remove(::PlayState_obj::boyfriend,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3366)					_gthis->remove(::PlayState_obj::dad,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3367)					_gthis->remove(::PlayState_obj::gf,null()).StaticCast<  ::flixel::FlxBasic >();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3354)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3369)				{
HXLINE(3369)					 ::flixel::FlxState nextState =  ::StageDebugState_obj::__alloc( HX_CTX ,::PlayState_obj::Stage->curStage,null(),null(),null());
HXDLIN(3369)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3369)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(3373)				if (::PlayState_obj::isStoryMode) {
HXLINE(3375)					 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(3375)					::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(3376)					 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3376)					::PlayState_obj::campaignMisses = (::PlayState_obj::campaignMisses + ::PlayState_obj::misses);
HXLINE(3377)					 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3377)					::PlayState_obj::campaignSicks = (::PlayState_obj::campaignSicks + ::PlayState_obj::sicks);
HXLINE(3378)					 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3378)					::PlayState_obj::campaignGoods = (::PlayState_obj::campaignGoods + ::PlayState_obj::goods);
HXLINE(3379)					 ::Dynamic _hx_tmp4 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3379)					::PlayState_obj::campaignBads = (::PlayState_obj::campaignBads + ::PlayState_obj::bads);
HXLINE(3380)					 ::Dynamic _hx_tmp5 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3380)					::PlayState_obj::campaignShits = (::PlayState_obj::campaignShits + ::PlayState_obj::shits);
HXLINE(3382)					::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3384)					if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(3386)						this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(3387)						this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(3389)						this->paused = true;
HXLINE(3391)						{
HXLINE(3391)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3391)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(3392)						{
HXLINE(3392)							 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3392)							_this1->cleanup(_this1->autoDestroy,true);
            						}
HXLINE(3393)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            							void _hx_run( ::flixel::util::FlxTimer tmr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3404_endSong)
HXLINE(3404)								::PlayState_obj::inResults = true;
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3395)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(3397)								::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::songPosBar, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE(3398)								::flixel::tweens::FlxTween_obj::tween(this->bar, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE(3399)								::flixel::tweens::FlxTween_obj::tween(this->songName, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
            							}
HXLINE(3401)							this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3402)							 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1()),null());
            						}
            						else {
HXLINE(3409)							::GameplayCustomizeState_obj::freeplayBf = HX_("bf",c4,55,00,00);
HXLINE(3410)							::GameplayCustomizeState_obj::freeplayDad = HX_("dad",47,36,4c,00);
HXLINE(3411)							::GameplayCustomizeState_obj::freeplayGf = HX_("gf",1f,5a,00,00);
HXLINE(3412)							::GameplayCustomizeState_obj::freeplayNoteStyle = HX_("normal",27,72,69,30);
HXLINE(3413)							::GameplayCustomizeState_obj::freeplayStage = HX_("stage",be,6a,0b,84);
HXLINE(3414)							::GameplayCustomizeState_obj::freeplaySong = HX_("bopeebo",b0,01,c5,0c);
HXLINE(3415)							::GameplayCustomizeState_obj::freeplayWeek = 1;
HXLINE(3416)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3416)							::String library = null();
HXDLIN(3416)							_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3417)							::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE(3418)							{
HXLINE(3418)								 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3418)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3418)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE(3419)							this->clean();
            						}
HXLINE(3423)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3425)							::PlayState_obj::luaModchart->die();
HXLINE(3426)							::PlayState_obj::luaModchart = null();
            						}
HXLINE(3430)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3432)							::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            						}
HXLINE(3435)						::StoryMenuState_obj::unlockNextWeek(::PlayState_obj::storyWeek);
            					}
            					else {
HXLINE(3439)						::String diff = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_111,3)->__get(::PlayState_obj::storyDifficulty);
HXLINE(3441)						{
HXLINE(3441)							 ::Dynamic input = (((HX_("PlayState: Loading next story song ",1a,f0,bd,89) + ::PlayState_obj::storyPlaylist->__get(0)) + HX_("-",2d,00,00,00)) + diff);
HXDLIN(3441)							if (::hx::IsNotNull( input )) {
HXLINE(3441)								::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3441,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXDLIN(3441)								::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN(3441)								::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            							}
            						}
HXLINE(3443)						if ((::StringTools_obj::replace(::PlayState_obj::storyPlaylist->__get(0),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(3445)							 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(3445)							 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(3447)							blackShit1->scrollFactor->set(null(),null());
HXLINE(3448)							this->add(blackShit1);
HXLINE(3449)							this->camHUD->set_visible(false);
HXLINE(3451)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3451)							_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            						}
HXLINE(3454)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(3455)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(3456)						::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(3458)						::PlayState_obj::SONG = ::Song_obj::loadFromJson(::PlayState_obj::storyPlaylist->__get(0),diff);
HXLINE(3459)						{
HXLINE(3459)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3459)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(3461)						{
HXLINE(3461)							 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3461)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3461)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3462)						this->clean();
            					}
            				}
            				else {
HXLINE(3469)					this->paused = true;
HXLINE(3471)					{
HXLINE(3471)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3471)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3472)					{
HXLINE(3472)						 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3472)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(3474)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3479_endSong)
HXLINE(3479)							::PlayState_obj::inResults = true;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3476)						this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3477)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2()),null());
            					}
            					else {
HXLINE(3484)						{
HXLINE(3484)							 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3484)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3484)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3485)						this->clean();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

Float PlayState_obj::getRatesScore(Float rate,Float score){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3497_getRatesScore)
HXLINE(3498)		Float rateX = ( (Float)(1) );
HXLINE(3499)		Float lastScore = score;
HXLINE(3500)		Float pr = (rate - ((Float)0.05));
HXLINE(3501)		if ((pr < ((Float)1.00))) {
HXLINE(3502)			pr = ( (Float)(1) );
            		}
HXLINE(3504)		while((rateX <= pr)){
HXLINE(3506)			if ((rateX > pr)) {
HXLINE(3507)				goto _hx_goto_113;
            			}
HXLINE(3508)			lastScore = (score + ((lastScore * rateX) * ((Float)0.022)));
HXLINE(3509)			rateX = (rateX + ((Float)0.05));
            		}
            		_hx_goto_113:;
HXLINE(3512)		int actualScore = ::Math_obj::round((score + (( (Float)(::Math_obj::floor((lastScore * pr))) ) * ((Float)0.022))));
HXLINE(3514)		return ( (Float)(actualScore) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getRatesScore,return )

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3521_popUpScore)
HXLINE(3520)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3522)		Float noteDiff;
HXLINE(3523)		if (::hx::IsNotNull( daNote )) {
HXLINE(3524)			noteDiff = -((daNote->strumTime - ::Conductor_obj::songPosition));
            		}
            		else {
HXLINE(3526)			noteDiff = ::Conductor_obj::safeZoneOffset;
            		}
HXLINE(3527)		Float wife = ::EtternaFunctions_obj::wife3(-(noteDiff),::Conductor_obj::timeScale);
HXLINE(3529)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(3530)		::String placement = ::Std_obj::string(this->combo);
HXLINE(3532)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(3533)		coolText->screenCenter(null());
HXLINE(3534)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(3535)		{
HXLINE(3535)			 ::flixel::text::FlxText _g = coolText;
HXDLIN(3535)			_g->set_y((_g->y - ( (Float)(350) )));
            		}
HXLINE(3536)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3539)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3540)		Float score = ( (Float)(350) );
HXLINE(3542)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3543)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3543)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(3545)		::String daRating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(3547)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(3559)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(3560)			score = ( (Float)(0) );
HXLINE(3561)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3561)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
HXLINE(3562)			this->ss = false;
HXLINE(3563)			::PlayState_obj::bads++;
HXLINE(3564)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3565)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3565)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(3558)			goto _hx_goto_115;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(3567)			daRating = HX_("good",3d,95,69,44);
HXLINE(3568)			score = ( (Float)(200) );
HXLINE(3569)			this->ss = false;
HXLINE(3570)			::PlayState_obj::goods++;
HXLINE(3571)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3572)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3572)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(3566)			goto _hx_goto_115;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3550)			score = ( (Float)(-300) );
HXLINE(3551)			this->combo = 0;
HXLINE(3552)			::PlayState_obj::misses++;
HXLINE(3553)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3553)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.1));
HXLINE(3554)			this->ss = false;
HXLINE(3555)			::PlayState_obj::shits++;
HXLINE(3556)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3557)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3557)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3549)			goto _hx_goto_115;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(3574)			if ((this->health < 2)) {
HXLINE(3575)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3575)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.04));
            			}
HXLINE(3576)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3577)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3577)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3578)			::PlayState_obj::sicks++;
HXLINE(3573)			goto _hx_goto_115;
            		}
            		_hx_goto_115:;
HXLINE(3581)		if ((::PlayState_obj::songMultiplier >= ((Float)1.05))) {
HXLINE(3582)			score = this->getRatesScore(::PlayState_obj::songMultiplier,score);
            		}
HXLINE(3586)		bool _hx_tmp;
HXDLIN(3586)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(3586)			_hx_tmp = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(3586)			_hx_tmp = true;
            		}
HXDLIN(3586)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3802_popUpScore)
HXLINE(3803)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(3804)					 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(3804)					_g->set_alpha((_g->alpha - ((Float)0.02)));
            				}
HXLINE(3805)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3811_popUpScore)
HXLINE(3812)				coolText->destroy();
HXLINE(3813)				comboSpr1->destroy();
HXLINE(3814)				bool _hx_tmp;
HXDLIN(3814)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(3814)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(3814)					_hx_tmp = false;
            				}
HXDLIN(3814)				if (_hx_tmp) {
HXLINE(3816)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3817)					_gthis->currentTimingShown = null();
            				}
HXLINE(3819)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3588)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3588)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(3598)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(3599)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(3600)			::String pixelShitPart3 = null();
HXLINE(3602)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3604)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(3605)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
HXLINE(3606)				pixelShitPart3 = HX_("week6",c2,95,be,c7);
            			}
HXLINE(3609)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3609)			rating1->loadGraphic(::Paths_obj::loadImage(((pixelShitPart1 + daRating) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3610)			rating->screenCenter(null());
HXLINE(3611)			{
HXLINE(3611)				 ::flixel::FlxSprite _g = rating;
HXDLIN(3611)				_g->set_y((_g->y - ( (Float)(50) )));
            			}
HXLINE(3612)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(3614)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(3616)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(3617)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(3619)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(3620)			{
HXLINE(3620)				 ::flixel::math::FlxPoint _g1 = rating->velocity;
HXDLIN(3620)				Float _g2 = _g1->y;
HXDLIN(3620)				_g1->set_y((_g2 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            			}
HXLINE(3621)			{
HXLINE(3621)				 ::flixel::math::FlxPoint _g3 = rating->velocity;
HXDLIN(3621)				Float _g4 = _g3->x;
HXDLIN(3621)				_g3->set_x((_g4 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            			}
HXLINE(3623)			Float msTiming = ::HelperFunctions_obj::truncateFloat((noteDiff / ::PlayState_obj::songMultiplier),3);
HXLINE(3624)			bool _hx_tmp1;
HXDLIN(3624)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3624)				_hx_tmp1 = !(::PlayState_obj::loadRep);
            			}
            			else {
HXLINE(3624)				_hx_tmp1 = false;
            			}
HXDLIN(3624)			if (_hx_tmp1) {
HXLINE(3625)				msTiming = ( (Float)(0) );
            			}
HXLINE(3627)			if (::PlayState_obj::loadRep) {
HXLINE(3628)				msTiming = ::HelperFunctions_obj::truncateFloat(( (Float)(this->findByTime(daNote->strumTime)->__get(3)) ),3);
            			}
HXLINE(3630)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(3631)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(3633)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(3634)			this->timeShown = 0;
HXLINE(3635)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(3640)				this->currentTimingShown->set_color(-16744448);
HXDLIN(3640)				goto _hx_goto_116;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3638)				this->currentTimingShown->set_color(-65536);
HXDLIN(3638)				goto _hx_goto_116;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(3642)				this->currentTimingShown->set_color(-16711681);
HXDLIN(3642)				goto _hx_goto_116;
            			}
            			_hx_goto_116:;
HXLINE(3644)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(3645)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(3646)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(3647)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(3648)			this->currentTimingShown->set_size(20);
HXLINE(3650)			bool _hx_tmp2;
HXDLIN(3650)			if ((msTiming >= ((Float)0.03))) {
HXLINE(3650)				_hx_tmp2 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(3650)				_hx_tmp2 = false;
            			}
HXDLIN(3650)			if (_hx_tmp2) {
HXLINE(3653)				this->hits->shift();
HXLINE(3654)				this->hits->shift();
HXLINE(3655)				this->hits->shift();
HXLINE(3656)				this->hits->pop();
HXLINE(3657)				this->hits->pop();
HXLINE(3658)				this->hits->pop();
HXLINE(3659)				this->hits->push(msTiming);
HXLINE(3661)				Float total = ((Float)0.0);
HXLINE(3663)				{
HXLINE(3663)					int _g = 0;
HXDLIN(3663)					::Array< Float > _g1 = this->hits;
HXDLIN(3663)					while((_g < _g1->length)){
HXLINE(3663)						Float i = _g1->__get(_g);
HXDLIN(3663)						_g = (_g + 1);
HXLINE(3664)						total = (total + i);
            					}
            				}
HXLINE(3666)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(3669)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(3670)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(3672)			bool _hx_tmp3;
HXDLIN(3672)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3672)				_hx_tmp3 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3672)				_hx_tmp3 = true;
            			}
HXDLIN(3672)			if (_hx_tmp3) {
HXLINE(3673)				this->add(this->currentTimingShown);
            			}
HXLINE(3675)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(3675)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::loadImage(((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3676)			comboSpr1->screenCenter(null());
HXLINE(3677)			comboSpr1->set_x(rating->x);
HXLINE(3678)			comboSpr1->set_y((rating->y + 100));
HXLINE(3679)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(3680)			{
HXLINE(3680)				 ::flixel::math::FlxPoint _g5 = comboSpr1->velocity;
HXDLIN(3680)				_g5->set_y((_g5->y - ( (Float)(150) )));
            			}
HXLINE(3682)			this->currentTimingShown->screenCenter(null());
HXLINE(3683)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(3684)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(3685)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(3686)			{
HXLINE(3686)				 ::flixel::math::FlxPoint _g6 = this->currentTimingShown->velocity;
HXDLIN(3686)				_g6->set_y((_g6->y - ( (Float)(150) )));
            			}
HXLINE(3688)			{
HXLINE(3688)				 ::flixel::math::FlxPoint _g7 = comboSpr1->velocity;
HXDLIN(3688)				Float _g8 = _g7->x;
HXDLIN(3688)				_g7->set_x((_g8 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            			}
HXLINE(3689)			{
HXLINE(3689)				 ::flixel::math::FlxPoint _g9 = this->currentTimingShown->velocity;
HXDLIN(3689)				_g9->set_x((_g9->x + comboSpr1->velocity->x));
            			}
HXLINE(3690)			bool _hx_tmp4;
HXDLIN(3690)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3690)				_hx_tmp4 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3690)				_hx_tmp4 = true;
            			}
HXDLIN(3690)			if (_hx_tmp4) {
HXLINE(3691)				this->add(rating);
            			}
HXLINE(3693)			if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3695)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3695)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(3696)				rating->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(3697)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3697)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(3698)				comboSpr1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3702)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3702)				Float _hx_tmp = rating->get_width();
HXDLIN(3702)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::CoolUtil_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(3703)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3703)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(3703)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::CoolUtil_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(3706)			this->currentTimingShown->updateHitbox();
HXLINE(3707)			comboSpr1->updateHitbox();
HXLINE(3708)			rating->updateHitbox();
HXLINE(3710)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3711)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3712)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3714)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(3716)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(3718)			if ((this->combo > ::PlayState_obj::highestCombo)) {
HXLINE(3719)				::PlayState_obj::highestCombo = this->combo;
            			}
HXLINE(3722)			if ((comboSplit->length == 1)) {
HXLINE(3724)				seperatedScore->push(0);
HXLINE(3725)				seperatedScore->push(0);
            			}
            			else {
HXLINE(3727)				if ((comboSplit->length == 2)) {
HXLINE(3728)					seperatedScore->push(0);
            				}
            			}
HXLINE(3730)			{
HXLINE(3730)				int _g10 = 0;
HXDLIN(3730)				int _g11 = comboSplit->length;
HXDLIN(3730)				while((_g10 < _g11)){
HXLINE(3730)					_g10 = (_g10 + 1);
HXDLIN(3730)					int i = (_g10 - 1);
HXLINE(3732)					::String str = comboSplit->__get(i);
HXLINE(3733)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(3736)			int daLoop = 0;
HXLINE(3737)			{
HXLINE(3737)				int _g12 = 0;
HXDLIN(3737)				while((_g12 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3766_popUpScore)
HXLINE(3767)						_gthis->visibleCombos->remove(numScore1);
HXLINE(3768)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3772_popUpScore)
HXLINE(3772)						if (!(_gthis->visibleCombos->contains(numScore1))) {
HXLINE(3774)							tween->cancel();
HXLINE(3775)							numScore1->destroy();
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3737)					int i = seperatedScore->__get(_g12);
HXDLIN(3737)					_g12 = (_g12 + 1);
HXLINE(3739)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(3739)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::loadImage((((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3740)					numScore1->screenCenter(null());
HXLINE(3741)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(3742)					numScore1->set_y((rating->y + 100));
HXLINE(3743)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3745)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3747)						numScore1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(3748)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(3748)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(3752)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(3752)						Float _hx_tmp = numScore1->get_width();
HXDLIN(3752)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(3754)					numScore1->updateHitbox();
HXLINE(3756)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(3756)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(3757)					{
HXLINE(3757)						 ::flixel::math::FlxPoint _g = numScore1->velocity;
HXDLIN(3757)						Float _g1 = _g->y;
HXDLIN(3757)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE(3758)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(3758)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(3760)					this->add(numScore1);
HXLINE(3762)					this->visibleCombos->push(numScore1);
HXLINE(3764)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,numScore1)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis,numScore1)))));
HXLINE(3781)					if ((this->visibleCombos->length > (seperatedScore->length + 20))) {
HXLINE(3783)						int _g = 0;
HXDLIN(3783)						int _g1 = (seperatedScore->length - 1);
HXDLIN(3783)						while((_g < _g1)){
HXLINE(3783)							_g = (_g + 1);
HXDLIN(3783)							int i = (_g - 1);
HXLINE(3785)							this->visibleCombos->remove(this->visibleCombos->__get((this->visibleCombos->length - 1)).StaticCast<  ::flixel::FlxSprite >());
            						}
            					}
HXLINE(3789)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(3796)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(3796)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(3799)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_2(_gthis)))));
HXLINE(3809)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis,coolText,comboSpr1,rating)))));
HXLINE(3824)			 ::PlayState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3824)			_hx_tmp5->curSection = (_hx_tmp5->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3830_NearlyEquals)
HXDLIN(3830)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(3830)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::StaticArrow spr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4032_keyShit)
HXLINE(4032)			if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(4034)				bool _hx_tmp;
HXDLIN(4034)				bool _hx_tmp1;
HXDLIN(4034)				bool _hx_tmp2;
HXDLIN(4034)				if (_gthis->keys->__get(spr->ID)) {
HXLINE(4034)					_hx_tmp2 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE(4034)					_hx_tmp2 = false;
            				}
HXDLIN(4034)				if (_hx_tmp2) {
HXLINE(4034)					_hx_tmp1 = (spr->animation->_curAnim->name != HX_("pressed",a2,d2,e6,39));
            				}
            				else {
HXLINE(4034)					_hx_tmp1 = false;
            				}
HXDLIN(4034)				if (_hx_tmp1) {
HXLINE(4034)					_hx_tmp = !(::StringTools_obj::startsWith(spr->animation->_curAnim->name,HX_("dirCon",f5,88,50,bc)));
            				}
            				else {
HXLINE(4034)					_hx_tmp = false;
            				}
HXDLIN(4034)				if (_hx_tmp) {
HXLINE(4038)					spr->playAnim(HX_("pressed",a2,d2,e6,39),false);
            				}
HXLINE(4039)				if (!(_gthis->keys->__get(spr->ID))) {
HXLINE(4040)					spr->playAnim(HX_("static",ae,dc,fb,05),false);
            				}
            			}
            			else {
HXLINE(4042)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
HXLINE(4044)					if (spr->animation->get_finished()) {
HXLINE(4045)						spr->playAnim(HX_("static",ae,dc,fb,05),null());
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3841_keyShit)
HXLINE(3840)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3843)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(3843)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(3843)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(3843)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(3844)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXDLIN(3844)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXDLIN(3844)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXDLIN(3844)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(3845)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXDLIN(3845)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXDLIN(3845)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXDLIN(3845)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(3846)		::Array< ::String > keynameArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_138,4);
HXLINE(3848)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3850)			{
HXLINE(3850)				int _g = 0;
HXDLIN(3850)				int _g1 = pressArray3->length;
HXDLIN(3850)				while((_g < _g1)){
HXLINE(3850)					_g = (_g + 1);
HXDLIN(3850)					int i = (_g - 1);
HXLINE(3852)					if ((pressArray3->__get(i) == true)) {
HXLINE(3854)						::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
HXLINE(3858)			{
HXLINE(3858)				int _g2 = 0;
HXDLIN(3858)				int _g3 = releaseArray3->length;
HXDLIN(3858)				while((_g2 < _g3)){
HXLINE(3858)					_g2 = (_g2 + 1);
HXDLIN(3858)					int i = (_g2 - 1);
HXLINE(3860)					if ((releaseArray3->__get(i) == true)) {
HXLINE(3862)						::PlayState_obj::luaModchart->executeState(HX_("keyReleased",7c,05,0c,bf),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
            		}
HXLINE(3869)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3871)			holdArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_139,4);
HXLINE(3872)			pressArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_140,4);
HXLINE(3873)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_141,4);
            		}
HXLINE(3876)		::Array< ::Dynamic> anas = ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,null())->init(2,null())->init(3,null());
HXLINE(3878)		{
HXLINE(3878)			int _g = 0;
HXDLIN(3878)			int _g1 = pressArray3->length;
HXDLIN(3878)			while((_g < _g1)){
HXLINE(3878)				_g = (_g + 1);
HXDLIN(3878)				int i = (_g - 1);
HXLINE(3879)				if (pressArray3->__get(i)) {
HXLINE(3880)					anas[i] =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),i);
            				}
            			}
            		}
HXLINE(3883)		bool _hx_tmp;
HXDLIN(3883)		if (holdArray3->contains(true)) {
HXLINE(3883)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(3883)			_hx_tmp = false;
            		}
HXDLIN(3883)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3887_keyShit)
HXLINE(3887)				bool _hx_tmp;
HXDLIN(3887)				bool _hx_tmp1;
HXDLIN(3887)				bool _hx_tmp2;
HXDLIN(3887)				bool _hx_tmp3;
HXDLIN(3887)				if (daNote->isSustainNote) {
HXLINE(3887)					_hx_tmp3 = daNote->canBeHit;
            				}
            				else {
HXLINE(3887)					_hx_tmp3 = false;
            				}
HXDLIN(3887)				if (_hx_tmp3) {
HXLINE(3887)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(3887)					_hx_tmp2 = false;
            				}
HXDLIN(3887)				if (_hx_tmp2) {
HXLINE(3887)					_hx_tmp1 = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(3887)					_hx_tmp1 = false;
            				}
HXDLIN(3887)				if (_hx_tmp1) {
HXLINE(3887)					_hx_tmp = daNote->sustainActive;
            				}
            				else {
HXLINE(3887)					_hx_tmp = false;
            				}
HXDLIN(3887)				if (_hx_tmp) {
HXLINE(3889)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3885)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(3894)		bool _hx_tmp1;
HXDLIN(3894)		if (::KeyBinds_obj::gamepad) {
HXLINE(3894)			_hx_tmp1 = !(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY());
            		}
            		else {
HXLINE(3894)			_hx_tmp1 = false;
            		}
HXDLIN(3894)		if (_hx_tmp1) {
HXLINE(3897)			bool _hx_tmp;
HXDLIN(3897)			if (pressArray3->contains(true)) {
HXLINE(3897)				_hx_tmp = this->generatedMusic;
            			}
            			else {
HXLINE(3897)				_hx_tmp = false;
            			}
HXDLIN(3897)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList,::Array< bool >,directionsAccounted) HXARGC(1)
            				void _hx_run( ::Note daNote){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3908_keyShit)
HXLINE(3908)					bool _hx_tmp;
HXDLIN(3908)					bool _hx_tmp1;
HXDLIN(3908)					bool _hx_tmp2;
HXDLIN(3908)					if (daNote->canBeHit) {
HXLINE(3908)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(3908)						_hx_tmp2 = false;
            					}
HXDLIN(3908)					if (_hx_tmp2) {
HXLINE(3908)						_hx_tmp1 = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE(3908)						_hx_tmp1 = false;
            					}
HXDLIN(3908)					if (_hx_tmp1) {
HXLINE(3908)						_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            					}
            					else {
HXLINE(3908)						_hx_tmp = false;
            					}
HXDLIN(3908)					if (_hx_tmp) {
HXLINE(3910)						if (directionList->contains(daNote->noteData)) {
HXLINE(3912)							directionsAccounted[daNote->noteData] = true;
HXLINE(3913)							{
HXLINE(3913)								int _g = 0;
HXDLIN(3913)								while((_g < possibleNotes->length)){
HXLINE(3913)									 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3913)									_g = (_g + 1);
HXLINE(3915)									bool _hx_tmp;
HXDLIN(3915)									if ((coolNote->noteData == daNote->noteData)) {
HXLINE(3915)										_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            									}
            									else {
HXLINE(3915)										_hx_tmp = false;
            									}
HXDLIN(3915)									if (_hx_tmp) {
HXLINE(3918)										dumbNotes->push(daNote);
HXLINE(3919)										goto _hx_goto_130;
            									}
            									else {
HXLINE(3921)										bool _hx_tmp;
HXDLIN(3921)										if ((coolNote->noteData == daNote->noteData)) {
HXLINE(3921)											_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            										}
            										else {
HXLINE(3921)											_hx_tmp = false;
            										}
HXDLIN(3921)										if (_hx_tmp) {
HXLINE(3923)											possibleNotes->remove(coolNote);
HXLINE(3924)											possibleNotes->push(daNote);
HXLINE(3925)											goto _hx_goto_130;
            										}
            									}
            								}
            								_hx_goto_130:;
            							}
            						}
            						else {
HXLINE(3931)							directionsAccounted[daNote->noteData] = true;
HXLINE(3932)							possibleNotes->push(daNote);
HXLINE(3933)							directionList->push(daNote->noteData);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3946_keyShit)
HXLINE(3946)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(3899)				::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(3901)				::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3902)				::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(3903)				::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3904)				::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_145,4);
HXLINE(3906)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList,directionsAccounted)),null());
HXLINE(3938)				{
HXLINE(3938)					int _g = 0;
HXDLIN(3938)					while((_g < dumbNotes->length)){
HXLINE(3938)						 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3938)						_g = (_g + 1);
HXLINE(3941)						note->kill();
HXLINE(3942)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3943)						note->destroy();
            					}
            				}
HXLINE(3946)				possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(3948)				::Array< bool > hit = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_146,4);
HXLINE(3950)				if (this->perfectMode) {
HXLINE(3951)					this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            				}
            				else {
HXLINE(3952)					if ((possibleNotes->length > 0)) {
HXLINE(3954)						if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3956)							int _g = 0;
HXDLIN(3956)							int _g1 = pressArray3->length;
HXDLIN(3956)							while((_g < _g1)){
HXLINE(3956)								_g = (_g + 1);
HXDLIN(3956)								int shit = (_g - 1);
HXLINE(3958)								bool _hx_tmp;
HXDLIN(3958)								if (pressArray3->__get(shit)) {
HXLINE(3958)									_hx_tmp = !(directionList->contains(shit));
            								}
            								else {
HXLINE(3958)									_hx_tmp = false;
            								}
HXDLIN(3958)								if (_hx_tmp) {
HXLINE(3959)									this->noteMiss(shit,null());
            								}
            							}
            						}
HXLINE(3962)						{
HXLINE(3962)							int _g = 0;
HXDLIN(3962)							while((_g < possibleNotes->length)){
HXLINE(3962)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3962)								_g = (_g + 1);
HXLINE(3964)								bool _hx_tmp;
HXDLIN(3964)								if (pressArray3->__get(coolNote->noteData)) {
HXLINE(3964)									_hx_tmp = !(hit->__get(coolNote->noteData));
            								}
            								else {
HXLINE(3964)									_hx_tmp = false;
            								}
HXDLIN(3964)								if (_hx_tmp) {
HXLINE(3966)									if ((this->mashViolations != 0)) {
HXLINE(3967)										this->mashViolations--;
            									}
HXLINE(3968)									hit[coolNote->noteData] = true;
HXLINE(3969)									this->scoreTxt->set_color(-1);
HXLINE(3970)									Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(3971)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hit = true;
HXLINE(3972)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(3973)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
HXLINE(3974)									this->goodNoteHit(coolNote,null());
            								}
            							}
            						}
            					}
            				}
HXLINE(3979)				bool _hx_tmp;
HXDLIN(3979)				if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(3979)					if (holdArray3->contains(true)) {
HXLINE(3979)						_hx_tmp = ::PlayStateChangeables_obj::botPlay;
            					}
            					else {
HXLINE(3979)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(3979)					_hx_tmp = false;
            				}
HXDLIN(3979)				if (_hx_tmp) {
HXLINE(3981)					bool _hx_tmp;
HXDLIN(3981)					if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(3981)						_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            					}
            					else {
HXLINE(3981)						_hx_tmp = false;
            					}
HXDLIN(3981)					if (_hx_tmp) {
HXLINE(3982)						::PlayState_obj::boyfriend->dance(null(),null());
            					}
            				}
            				else {
HXLINE(3984)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3986)						int _g = 0;
HXDLIN(3986)						int _g1 = pressArray3->length;
HXDLIN(3986)						while((_g < _g1)){
HXLINE(3986)							_g = (_g + 1);
HXDLIN(3986)							int shit = (_g - 1);
HXLINE(3987)							if (pressArray3->__get(shit)) {
HXLINE(3988)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(3992)			if (!(::PlayState_obj::loadRep)) {
HXLINE(3993)				int _g = 0;
HXDLIN(3993)				while((_g < anas->length)){
HXLINE(3993)					 ::Ana i = anas->__get(_g).StaticCast<  ::Ana >();
HXDLIN(3993)					_g = (_g + 1);
HXLINE(3994)					if (::hx::IsNotNull( i )) {
HXLINE(3995)						this->replayAna->anaArray->push(i);
            					}
            				}
            			}
            		}
HXLINE(3997)		if (::PlayStateChangeables_obj::botPlay) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4000_keyShit)
HXLINE(4000)				bool _hx_tmp;
HXDLIN(4000)				if (daNote->mustPress) {
HXLINE(4000)					_hx_tmp = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(4000)					_hx_tmp = false;
            				}
HXDLIN(4000)				if (_hx_tmp) {
HXLINE(4003)					if (::PlayState_obj::loadRep) {
HXLINE(4006)						::cpp::VirtualArray n = _gthis->findByTime(daNote->strumTime);
HXLINE(4008)						if (::hx::IsNotNull( n )) {
HXLINE(4010)							_gthis->goodNoteHit(daNote,null());
HXLINE(4011)							::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
            						}
            					}
            					else {
HXLINE(4016)						_gthis->goodNoteHit(daNote,null());
HXLINE(4017)						::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3998)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            		}
HXLINE(4022)		bool _hx_tmp2;
HXDLIN(4022)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4022)			if (holdArray3->contains(true)) {
HXLINE(4022)				_hx_tmp2 = ::PlayStateChangeables_obj::botPlay;
            			}
            			else {
HXLINE(4022)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(4022)			_hx_tmp2 = false;
            		}
HXDLIN(4022)		if (_hx_tmp2) {
HXLINE(4024)			bool _hx_tmp;
HXDLIN(4024)			bool _hx_tmp1;
HXDLIN(4024)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4024)				_hx_tmp1 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(4024)				_hx_tmp1 = false;
            			}
HXDLIN(4024)			if (_hx_tmp1) {
HXLINE(4026)				if ((::PlayState_obj::boyfriend->animation->_curAnim->curFrame < 10)) {
HXLINE(4024)					_hx_tmp = ::PlayState_obj::boyfriend->animation->_curAnim->finished;
            				}
            				else {
HXLINE(4024)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4024)				_hx_tmp = false;
            			}
HXDLIN(4024)			if (_hx_tmp) {
HXLINE(4027)				::PlayState_obj::boyfriend->dance(null(),null());
            			}
            		}
HXLINE(4030)		::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

::cpp::VirtualArray PlayState_obj::findByTime(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4051_findByTime)
HXLINE(4052)		{
HXLINE(4052)			int _g = 0;
HXDLIN(4052)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(4052)			while((_g < _g1->get_length())){
HXLINE(4052)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(4052)				_g = (_g + 1);
HXLINE(4055)				if (::hx::IsEq( i->__GetItem(0),time )) {
HXLINE(4056)					return ( (::cpp::VirtualArray)(i) );
            				}
            			}
            		}
HXLINE(4058)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTime,return )

int PlayState_obj::findByTimeIndex(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4062_findByTimeIndex)
HXLINE(4063)		{
HXLINE(4063)			int _g = 0;
HXDLIN(4063)			int _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) )->get_length();
HXDLIN(4063)			while((_g < _g1)){
HXLINE(4063)				_g = (_g + 1);
HXDLIN(4063)				int i = (_g - 1);
HXLINE(4066)				if (::hx::IsEq(  ::Dynamic(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic))->__GetItem(i)->__GetItem(0),time )) {
HXLINE(4067)					return i;
            				}
            			}
            		}
HXLINE(4069)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTimeIndex,return )

void PlayState_obj::backgroundVideo(::String source){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4082_backgroundVideo)
HXLINE(4084)		this->useVideo = true;
HXLINE(4086)		::String ourSource = HX_("assets/videos/daWeirdVid/dontDelete.webm",08,bc,66,81);
HXLINE(4088)		::String str1 = HX_("WEBM SHIT",e7,ff,8c,40);
HXLINE(4089)		::PlayState_obj::webmHandler =  ::WebmHandler_obj::__alloc( HX_CTX );
HXLINE(4090)		::PlayState_obj::webmHandler->source(ourSource);
HXLINE(4091)		::PlayState_obj::webmHandler->makePlayer();
HXLINE(4092)		::PlayState_obj::webmHandler->webm->set_name(str1);
HXLINE(4094)		::GlobalVideo_obj::setWebm(::PlayState_obj::webmHandler);
HXLINE(4096)		::GlobalVideo_obj::get()->__Field(HX_("source",db,b0,31,32),::hx::paccDynamic)(source);
HXLINE(4097)		::GlobalVideo_obj::get()->__Field(HX_("clearPause",29,16,62,92),::hx::paccDynamic)();
HXLINE(4098)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4100)			::GlobalVideo_obj::get()->__Field(HX_("updatePlayer",4a,92,7c,37),::hx::paccDynamic)();
            		}
HXLINE(4102)		::GlobalVideo_obj::get()->__Field(HX_("show",fd,d4,52,4c),::hx::paccDynamic)();
HXLINE(4104)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4106)			::GlobalVideo_obj::get()->__Field(HX_("restart",cf,c7,a5,6a),::hx::paccDynamic)();
            		}
            		else {
HXLINE(4110)			::GlobalVideo_obj::get()->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)();
            		}
HXLINE(4113)		 ::openfl::display::BitmapData data = ::PlayState_obj::webmHandler->webm->get_bitmapData();
HXLINE(4115)		this->videoSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-470,-30,null())->loadGraphic(data,null(),null(),null(),null(),null());
HXLINE(4117)		 ::flixel::FlxSprite _hx_tmp = this->videoSprite;
HXDLIN(4117)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->videoSprite->get_width() * ((Float)1.2))),null());
HXLINE(4119)		this->remove(::PlayState_obj::gf,null());
HXLINE(4120)		this->remove(::PlayState_obj::boyfriend,null());
HXLINE(4121)		this->remove(::PlayState_obj::dad,null());
HXLINE(4122)		this->add(this->videoSprite);
HXLINE(4123)		this->add(::PlayState_obj::gf);
HXLINE(4124)		this->add(::PlayState_obj::boyfriend);
HXLINE(4125)		this->add(::PlayState_obj::dad);
HXLINE(4129)		if (!(this->songStarted)) {
HXLINE(4130)			::PlayState_obj::webmHandler->pause();
            		}
            		else {
HXLINE(4132)			::PlayState_obj::webmHandler->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,backgroundVideo,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4138_noteMiss)
HXDLIN(4138)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(4141)			bool _hx_tmp;
HXDLIN(4141)			if ((this->combo > 5)) {
HXLINE(4141)				_hx_tmp = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(4141)				_hx_tmp = false;
            			}
HXDLIN(4141)			if (_hx_tmp) {
HXLINE(4143)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(4145)			if ((this->combo != 0)) {
HXLINE(4147)				this->combo = 0;
HXLINE(4148)				this->popUpScore(null());
            			}
HXLINE(4150)			::PlayState_obj::misses++;
HXLINE(4152)			if (::hx::IsNotNull( daNote )) {
HXLINE(4154)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4156)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,daNote->strumTime)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4162)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
            			else {
HXLINE(4165)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4167)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,::Conductor_obj::songPosition)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4173)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
HXLINE(4179)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4179)			_hx_tmp1->totalNotesHit = (_hx_tmp1->totalNotesHit - ( (Float)(1) ));
HXLINE(4181)			if (::hx::IsNotNull( daNote )) {
HXLINE(4183)				if (!(daNote->isSustainNote)) {
HXLINE(4184)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4184)					_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            				}
            			}
            			else {
HXLINE(4187)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4187)				_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            			}
HXLINE(4189)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("missSounds",e0,d4,49,2b),::hx::paccDynamic)) )) {
HXLINE(4191)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4191)				::String key = (HX_("missnote",ee,98,f1,e3) + this->altSuffix);
HXDLIN(4191)				::String library = null();
HXDLIN(4191)				::String _hx_tmp1 = ::Paths_obj::sound((key + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(4191)				_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
            			}
HXLINE(4197)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
HXLINE(4200)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4201)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4204)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4229_updateAccuracy)
HXLINE(4230)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4230)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(4231)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4232)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4234)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN(4234)		_hx_tmp1->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE(4235)		this->judgementCounter->set_text((((((((((HX_("Sicks: ",bb,1b,ab,be) + ::PlayState_obj::sicks) + HX_("\nGoods: ",d2,a1,f4,51)) + ::PlayState_obj::goods) + HX_("\nBads: ",de,84,b3,1f)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nMisses: ",ba,59,21,f5)) + ::PlayState_obj::misses));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4244_getKeyPresses)
HXLINE(4244)			bool _hx_tmp;
HXDLIN(4244)			if (daNote->canBeHit) {
HXLINE(4244)				_hx_tmp = daNote->mustPress;
            			}
            			else {
HXLINE(4244)				_hx_tmp = false;
            			}
HXDLIN(4244)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4247_getKeyPresses)
HXLINE(4247)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4246)				possibleNotes->push(daNote);
HXLINE(4247)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4239_getKeyPresses)
HXLINE(4240)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4242)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(4250)		if ((possibleNotes->length == 1)) {
HXLINE(4251)			return (possibleNotes->length + 1);
            		}
HXLINE(4252)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4261_noteCheck)
HXLINE(4262)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4264)		note->rating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(4279)		if (controlArray->__get(note->noteData)) {
HXLINE(4281)			int _hx_tmp = this->mashing;
HXDLIN(4281)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4307_goodNoteHit)
HXLINE(4306)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4308)		if ((this->mashing != 0)) {
HXLINE(4309)			this->mashing = 0;
            		}
HXLINE(4311)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4313)		if (::PlayState_obj::loadRep) {
HXLINE(4315)			noteDiff = ( (Float)(this->findByTime(note->strumTime)->__get(3)) );
HXLINE(4316)			::Array< ::String > _hx_tmp = ( (::Array< ::String >)(::PlayState_obj::rep->replay->__Field(HX_("songJudgements",53,36,93,44),::hx::paccDynamic)) );
HXDLIN(4316)			int _hx_tmp1 = this->findByTimeIndex(note->strumTime);
HXDLIN(4316)			note->rating = _hx_tmp->__get(_hx_tmp1);
            		}
            		else {
HXLINE(4319)			note->rating = ::Ratings_obj::judgeNote(noteDiff);
            		}
HXLINE(4321)		if ((note->rating == HX_("miss",fc,52,5c,48))) {
HXLINE(4322)			return;
            		}
HXLINE(4326)		if (!(note->isSustainNote)) {
HXLINE(4327)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(4327)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(4329)		bool _hx_tmp;
HXDLIN(4329)		if (!(resetMashViolation)) {
HXLINE(4329)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(4329)			_hx_tmp = false;
            		}
HXDLIN(4329)		if (_hx_tmp) {
HXLINE(4330)			this->mashViolations--;
            		}
HXLINE(4332)		if ((this->mashViolations < 0)) {
HXLINE(4333)			this->mashViolations = 0;
            		}
HXLINE(4335)		if (!(note->wasGoodHit)) {
HXLINE(4337)			if (!(note->isSustainNote)) {
HXLINE(4339)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4339)				_hx_tmp->combo = (_hx_tmp->combo + 1);
HXLINE(4340)				this->popUpScore(note);
            			}
HXLINE(4343)			::String altAnim = HX_("",00,00,00,00);
HXLINE(4344)			if (note->isAlt) {
HXLINE(4346)				altAnim = HX_("-alt",1c,93,08,1e);
            			}
HXLINE(4350)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(note->noteData)) + altAnim),true,null(),null());
HXLINE(4353)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4354)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4357)			bool _hx_tmp;
HXDLIN(4357)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4357)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(4357)				_hx_tmp = false;
            			}
HXDLIN(4357)			if (_hx_tmp) {
HXLINE(4359)				::Array< Float > array = ::Array_obj< Float >::__new(4)->init(0,note->strumTime)->init(1,note->sustainLength)->init(2,note->noteData)->init(3,noteDiff);
HXLINE(4360)				if (note->isSustainNote) {
HXLINE(4361)					array[1] = ( (Float)(-1) );
            				}
HXLINE(4362)				this->saveNotes->push(array);
HXLINE(4363)				this->saveJudge->push(note->rating);
            			}
HXLINE(4366)			bool _hx_tmp1;
HXDLIN(4366)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4366)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(4366)				_hx_tmp1 = true;
            			}
HXDLIN(4366)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,note) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4370_goodNoteHit)
HXLINE(4370)					_gthis->pressArrow(spr,spr->ID,note);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4368)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,note)),null());
            			}
HXLINE(4374)			if (!(note->isSustainNote)) {
HXLINE(4376)				note->kill();
HXLINE(4377)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4378)				note->destroy();
            			}
            			else {
HXLINE(4382)				note->wasGoodHit = true;
            			}
HXLINE(4384)			if (!(note->isSustainNote)) {
HXLINE(4385)				this->updateAccuracy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::pressArrow( ::StaticArrow spr,int idCheck, ::Note daNote){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4391_pressArrow)
HXDLIN(4391)		if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == idCheck)) {
HXLINE(4393)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("stepMania",06,56,8a,73),::hx::paccDynamic)) ))) {
HXLINE(4395)				spr->playAnim(HX_("confirm",00,9d,39,10),true);
            			}
            			else {
HXLINE(4399)				spr->playAnim((HX_("dirCon",f5,88,50,bc) + daNote->originColor),true);
HXLINE(4400)				spr->localAngle = daNote->originAngle;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,pressArrow,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4408_stepHit)
HXLINE(4409)		this->super::stepHit();
HXLINE(4410)		bool _hx_tmp;
HXDLIN(4410)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::rawPosition + 20)))) {
HXLINE(4410)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::rawPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(4410)			_hx_tmp = true;
            		}
HXDLIN(4410)		if (_hx_tmp) {
HXLINE(4412)			this->resyncVocals();
            		}
HXLINE(4416)		bool _hx_tmp1;
HXDLIN(4416)		if (this->executeModchart) {
HXLINE(4416)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4416)			_hx_tmp1 = false;
            		}
HXDLIN(4416)		if (_hx_tmp1) {
HXLINE(4418)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(4419)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4425_beatHit)
HXLINE(4426)		this->super::beatHit();
HXLINE(4428)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4430_beatHit)
HXLINE(4430)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(4430)			int Order;
HXDLIN(4430)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(4430)				Order = -1;
            			}
            			else {
HXLINE(4430)				Order = 1;
            			}
HXDLIN(4430)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(4430)			int a1 = Order;
HXDLIN(4430)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(4430)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(4434)		bool _hx_tmp;
HXDLIN(4434)		if (this->executeModchart) {
HXLINE(4434)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4434)			_hx_tmp = false;
            		}
HXDLIN(4434)		if (_hx_tmp) {
HXLINE(4436)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(4440)		if (::hx::IsNotNull( this->currentSection )) {
HXLINE(4442)			if ((::hx::Mod(this->curBeat,this->idleBeat) == 0)) {
HXLINE(4444)				bool _hx_tmp;
HXDLIN(4444)				if (this->idleToBeat) {
HXLINE(4444)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4444)					_hx_tmp = false;
            				}
HXDLIN(4444)				if (_hx_tmp) {
HXLINE(4445)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
HXLINE(4446)				bool _hx_tmp1;
HXDLIN(4446)				if (this->idleToBeat) {
HXLINE(4446)					_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4446)					_hx_tmp1 = false;
            				}
HXDLIN(4446)				if (_hx_tmp1) {
HXLINE(4447)					::PlayState_obj::boyfriend->dance(this->forcedToIdle,this->currentSection->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic));
            				}
            			}
            			else {
HXLINE(4449)				bool _hx_tmp;
HXDLIN(4449)				bool _hx_tmp1;
HXDLIN(4449)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(4449)					_hx_tmp1 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(4449)					_hx_tmp1 = true;
            				}
HXDLIN(4449)				if (_hx_tmp1) {
HXLINE(4449)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4449)					_hx_tmp = false;
            				}
HXDLIN(4449)				if (_hx_tmp) {
HXLINE(4450)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
            			}
            		}
HXLINE(4453)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(4455)		bool _hx_tmp1;
HXDLIN(4455)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("camzoom",a2,ca,10,f1),::hx::paccDynamic)) )) {
HXLINE(4455)			_hx_tmp1 = (::PlayState_obj::songMultiplier == 1);
            		}
            		else {
HXLINE(4455)			_hx_tmp1 = false;
            		}
HXDLIN(4455)		if (_hx_tmp1) {
HXLINE(4458)			bool _hx_tmp;
HXDLIN(4458)			bool _hx_tmp1;
HXDLIN(4458)			bool _hx_tmp2;
HXDLIN(4458)			bool _hx_tmp3;
HXDLIN(4458)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("milf",d6,4c,5c,48) )) {
HXLINE(4458)				_hx_tmp3 = (this->curBeat >= 168);
            			}
            			else {
HXLINE(4458)				_hx_tmp3 = false;
            			}
HXDLIN(4458)			if (_hx_tmp3) {
HXLINE(4458)				_hx_tmp2 = (this->curBeat < 200);
            			}
            			else {
HXLINE(4458)				_hx_tmp2 = false;
            			}
HXDLIN(4458)			if (_hx_tmp2) {
HXLINE(4458)				_hx_tmp1 = this->camZooming;
            			}
            			else {
HXLINE(4458)				_hx_tmp1 = false;
            			}
HXDLIN(4458)			if (_hx_tmp1) {
HXLINE(4458)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4458)				_hx_tmp = false;
            			}
HXDLIN(4458)			if (_hx_tmp) {
HXLINE(4460)				{
HXLINE(4460)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4460)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4461)				{
HXLINE(4461)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4461)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
HXLINE(4464)			bool _hx_tmp4;
HXDLIN(4464)			bool _hx_tmp5;
HXDLIN(4464)			if (this->camZooming) {
HXLINE(4464)				_hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4464)				_hx_tmp5 = false;
            			}
HXDLIN(4464)			if (_hx_tmp5) {
HXLINE(4464)				_hx_tmp4 = (::hx::Mod(this->curBeat,4) == 0);
            			}
            			else {
HXLINE(4464)				_hx_tmp4 = false;
            			}
HXDLIN(4464)			if (_hx_tmp4) {
HXLINE(4466)				{
HXLINE(4466)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4466)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4467)				{
HXLINE(4467)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4467)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
            		}
HXLINE(4470)		if ((::PlayState_obj::songMultiplier == 1)) {
HXLINE(4472)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4472)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(4473)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4473)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(4475)			this->iconP1->updateHitbox();
HXLINE(4476)			this->iconP2->updateHitbox();
            		}
            		else {
HXLINE(4480)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4480)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 4)),null());
HXLINE(4481)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4481)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 4)),null());
HXLINE(4483)			this->iconP1->updateHitbox();
HXLINE(4484)			this->iconP2->updateHitbox();
            		}
HXLINE(4487)		bool _hx_tmp2;
HXDLIN(4487)		if (!(this->endingSong)) {
HXLINE(4487)			_hx_tmp2 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(4487)			_hx_tmp2 = false;
            		}
HXDLIN(4487)		if (_hx_tmp2) {
HXLINE(4489)			if (this->allowedToHeadbang) {
HXLINE(4491)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(4494)			bool _hx_tmp;
HXDLIN(4494)			if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(4494)				_hx_tmp = (this->curSong == HX_("Bopeebo",90,29,16,da));
            			}
            			else {
HXLINE(4494)				_hx_tmp = false;
            			}
HXDLIN(4494)			if (_hx_tmp) {
HXLINE(4496)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            			}
HXLINE(4499)			bool _hx_tmp1;
HXDLIN(4499)			bool _hx_tmp2;
HXDLIN(4499)			bool _hx_tmp3;
HXDLIN(4499)			bool _hx_tmp4;
HXDLIN(4499)			if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(4499)				_hx_tmp4 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("tutorial",9e,8f,b5,82) );
            			}
            			else {
HXLINE(4499)				_hx_tmp4 = false;
            			}
HXDLIN(4499)			if (_hx_tmp4) {
HXLINE(4499)				_hx_tmp3 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(4499)				_hx_tmp3 = false;
            			}
HXDLIN(4499)			if (_hx_tmp3) {
HXLINE(4499)				_hx_tmp2 = (this->curBeat > 16);
            			}
            			else {
HXLINE(4499)				_hx_tmp2 = false;
            			}
HXDLIN(4499)			if (_hx_tmp2) {
HXLINE(4499)				_hx_tmp1 = (this->curBeat < 48);
            			}
            			else {
HXLINE(4499)				_hx_tmp1 = false;
            			}
HXDLIN(4499)			if (_hx_tmp1) {
HXLINE(4501)				if ((this->vocals->_volume != 0)) {
HXLINE(4503)					::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4504)					::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            				}
            				else {
HXLINE(4508)					::PlayState_obj::dad->playAnim(HX_("sad",16,98,57,00),true,null(),null());
HXLINE(4509)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4509)					_hx_tmp->play(::Paths_obj::sound((HX_("GF_",60,1d,36,00) + ::flixel::FlxG_obj::random->_hx_int(1,4,null())),HX_("shared",a5,5e,2b,1d)),((Float)0.3),null(),null(),null(),null());
            				}
            			}
HXLINE(4513)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(4514)				bool _hx_tmp;
HXDLIN(4514)				if ((this->vocals->_volume == 0)) {
HXLINE(4514)					_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(4514)					_hx_tmp = false;
            				}
HXDLIN(4514)				if (_hx_tmp) {
HXLINE(4515)					this->vocals->set_volume(( (Float)(1) ));
            				}
            			}
            		}
            	}


void PlayState_obj::poggers( ::Dynamic __o_cleanTheSong){
            		 ::Dynamic cleanTheSong = __o_cleanTheSong;
            		if (::hx::IsNull(__o_cleanTheSong)) cleanTheSong = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4522_poggers)
HXLINE(4523)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4525)		if (( (bool)(cleanTheSong) )) {
HXLINE(4527)			this->cleanedSong = ::PlayState_obj::SONG;
HXLINE(4529)			{
HXLINE(4529)				int _g = 0;
HXDLIN(4529)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(4529)				while((_g < _g1->length)){
HXLINE(4529)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(4529)					_g = (_g + 1);
HXLINE(4531)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4533)					{
HXLINE(4533)						int _g2 = 0;
HXDLIN(4533)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(4533)						while((_g2 < _g3->length)){
HXLINE(4533)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(4533)							_g2 = (_g2 + 1);
HXLINE(4536)							 ::Dynamic old = note->__get(0);
HXLINE(4537)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(4539)								notes->push(note);
HXLINE(4540)								removed->push(note);
            							}
HXLINE(4542)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(4544)								notes->push(note);
HXLINE(4545)								removed->push(note);
            							}
            						}
            					}
HXLINE(4549)					{
HXLINE(4549)						int _g4 = 0;
HXDLIN(4549)						while((_g4 < removed->length)){
HXLINE(4549)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(4549)							_g4 = (_g4 + 1);
HXLINE(4551)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(4555)			{
HXLINE(4555)				int _g2 = 0;
HXDLIN(4555)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(4555)				while((_g2 < _g3->length)){
HXLINE(4555)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(4555)					_g2 = (_g2 + 1);
HXLINE(4557)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4559)					{
HXLINE(4559)						int _g = 0;
HXDLIN(4559)						while((_g < notes->length)){
HXLINE(4559)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(4559)							_g = (_g + 1);
HXLINE(4561)							bool _hx_tmp;
HXDLIN(4561)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(4561)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(4561)								_hx_tmp = false;
            							}
HXDLIN(4561)							if (_hx_tmp) {
HXLINE(4563)								saveRemove->push(i);
HXLINE(4564)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(4568)					{
HXLINE(4568)						int _g1 = 0;
HXDLIN(4568)						while((_g1 < saveRemove->length)){
HXLINE(4568)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(4568)							_g1 = (_g1 + 1);
HXLINE(4569)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(4574)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            		else {
HXLINE(4578)			{
HXLINE(4578)				int _g = 0;
HXDLIN(4578)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(4578)				while((_g < _g1->length)){
HXLINE(4578)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(4578)					_g = (_g + 1);
HXLINE(4580)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4582)					{
HXLINE(4582)						int _g2 = 0;
HXDLIN(4582)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(4582)						while((_g2 < _g3->length)){
HXLINE(4582)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(4582)							_g2 = (_g2 + 1);
HXLINE(4585)							 ::Dynamic old = note->__get(0);
HXLINE(4586)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(4588)								notes->push(note);
HXLINE(4589)								removed->push(note);
            							}
HXLINE(4591)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(4593)								notes->push(note);
HXLINE(4594)								removed->push(note);
            							}
            						}
            					}
HXLINE(4598)					{
HXLINE(4598)						int _g4 = 0;
HXDLIN(4598)						while((_g4 < removed->length)){
HXLINE(4598)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(4598)							_g4 = (_g4 + 1);
HXLINE(4600)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(4604)			{
HXLINE(4604)				int _g2 = 0;
HXDLIN(4604)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(4604)				while((_g2 < _g3->length)){
HXLINE(4604)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(4604)					_g2 = (_g2 + 1);
HXLINE(4606)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4608)					{
HXLINE(4608)						int _g = 0;
HXDLIN(4608)						while((_g < notes->length)){
HXLINE(4608)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(4608)							_g = (_g + 1);
HXLINE(4610)							bool _hx_tmp;
HXDLIN(4610)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(4610)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(4610)								_hx_tmp = false;
            							}
HXDLIN(4610)							if (_hx_tmp) {
HXLINE(4612)								saveRemove->push(i);
HXLINE(4613)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(4617)					{
HXLINE(4617)						int _g1 = 0;
HXDLIN(4617)						while((_g1 < saveRemove->length)){
HXLINE(4617)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(4617)							_g1 = (_g1 + 1);
HXLINE(4618)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(4623)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,poggers,(void))

 ::PlayState PlayState_obj::instance;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::weekScore;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::flixel::graphics::frames::FlxAtlasFrames PlayState_obj::noteskinSprite;

 ::openfl::display::BitmapData PlayState_obj::noteskinPixelSprite;

 ::openfl::display::BitmapData PlayState_obj::noteskinPixelSpriteEnds;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

bool PlayState_obj::inResults;

bool PlayState_obj::inDaPlay;

::Array< bool > PlayState_obj::noteBools;

bool PlayState_obj::isSM;

 ::smTools::SMFile PlayState_obj::sm;

::String PlayState_obj::pathToSm;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

int PlayState_obj::campaignMisses;

int PlayState_obj::campaignSicks;

int PlayState_obj::campaignGoods;

int PlayState_obj::campaignBads;

int PlayState_obj::campaignShits;

bool PlayState_obj::offsetTesting;

::String PlayState_obj::currentSong;

int PlayState_obj::campaignScore;

bool PlayState_obj::theFunne;

bool PlayState_obj::stageTesting;

 ::Stage PlayState_obj::Stage;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

Float PlayState_obj::songOffset;

int PlayState_obj::highestCombo;

Float PlayState_obj::startTime;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songMultiplier;

 ::WebmHandler PlayState_obj::webmHandler;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_MARK_MEMBER_NAME(addedBotplay,"addedBotplay");
	HX_MARK_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_MARK_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camSustains,"camSustains");
	HX_MARK_MEMBER_NAME(camNotes,"camNotes");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(cannotDie,"cannotDie");
	HX_MARK_MEMBER_NAME(isSMFile,"isSMFile");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_MARK_MEMBER_NAME(idleBeat,"idleBeat");
	HX_MARK_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(altSuffix,"altSuffix");
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(judgementCounter,"judgementCounter");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(needSkip,"needSkip");
	HX_MARK_MEMBER_NAME(skipActive,"skipActive");
	HX_MARK_MEMBER_NAME(skipText,"skipText");
	HX_MARK_MEMBER_NAME(skipTo,"skipTo");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(randomVar,"randomVar");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(saveJudge,"saveJudge");
	HX_MARK_MEMBER_NAME(replayAna,"replayAna");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(closestNotes,"closestNotes");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(doAnything,"doAnything");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(previousRate,"previousRate");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_MARK_MEMBER_NAME(removedVideo,"removedVideo");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_MARK_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_MARK_MEMBER_NAME(useVideo,"useVideo");
	HX_MARK_MEMBER_NAME(playingDathing,"playingDathing");
	HX_MARK_MEMBER_NAME(videoSprite,"videoSprite");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(danced,"danced");
	HX_MARK_MEMBER_NAME(cleanedSong,"cleanedSong");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_VISIT_MEMBER_NAME(addedBotplay,"addedBotplay");
	HX_VISIT_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_VISIT_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camSustains,"camSustains");
	HX_VISIT_MEMBER_NAME(camNotes,"camNotes");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(cannotDie,"cannotDie");
	HX_VISIT_MEMBER_NAME(isSMFile,"isSMFile");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_VISIT_MEMBER_NAME(idleBeat,"idleBeat");
	HX_VISIT_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(altSuffix,"altSuffix");
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(judgementCounter,"judgementCounter");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(needSkip,"needSkip");
	HX_VISIT_MEMBER_NAME(skipActive,"skipActive");
	HX_VISIT_MEMBER_NAME(skipText,"skipText");
	HX_VISIT_MEMBER_NAME(skipTo,"skipTo");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(randomVar,"randomVar");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(saveJudge,"saveJudge");
	HX_VISIT_MEMBER_NAME(replayAna,"replayAna");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(closestNotes,"closestNotes");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(doAnything,"doAnything");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(previousRate,"previousRate");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_VISIT_MEMBER_NAME(removedVideo,"removedVideo");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_VISIT_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_VISIT_MEMBER_NAME(useVideo,"useVideo");
	HX_VISIT_MEMBER_NAME(playingDathing,"playingDathing");
	HX_VISIT_MEMBER_NAME(videoSprite,"videoSprite");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(danced,"danced");
	HX_VISIT_MEMBER_NAME(cleanedSong,"cleanedSong");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"skipTo") ) { return ::hx::Val( skipTo ); }
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKey") ) { return ::hx::Val( getKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"danced") ) { return ::hx::Val( danced ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"camNotes") ) { return ::hx::Val( camNotes ); }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { return ::hx::Val( isSMFile ); }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { return ::hx::Val( idleBeat ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"needSkip") ) { return ::hx::Val( needSkip ); }
		if (HX_FIELD_EQ(inName,"skipText") ) { return ::hx::Val( skipText ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"useVideo") ) { return ::hx::Val( useVideo ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { return ::hx::Val( cannotDie ); }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { return ::hx::Val( altSuffix ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"randomVar") ) { return ::hx::Val( randomVar ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { return ::hx::Val( saveJudge ); }
		if (HX_FIELD_EQ(inName,"replayAna") ) { return ::hx::Val( replayAna ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { return ::hx::Val( idleToBeat ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"skipActive") ) { return ::hx::Val( skipActive ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { return ::hx::Val( dataSuffix ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"doAnything") ) { return ::hx::Val( doAnything ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { return ::hx::Val( stopUpdate ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"findByTime") ) { return ::hx::Val( findByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"pressArrow") ) { return ::hx::Val( pressArrow_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"camSustains") ) { return ::hx::Val( camSustains ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"handleInput") ) { return ::hx::Val( handleInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { return ::hx::Val( videoSprite ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { return ::hx::Val( cleanedSong ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedBotplay") ) { return ::hx::Val( addedBotplay ); }
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { return ::hx::Val( visibleNotes ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { return ::hx::Val( laneunderlay ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { return ::hx::Val( forcedToIdle ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"releaseInput") ) { return ::hx::Val( releaseInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { return ::hx::Val( closestNotes ); }
		if (HX_FIELD_EQ(inName,"previousRate") ) { return ::hx::Val( previousRate ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { return ::hx::Val( removedVideo ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { return ::hx::Val( visibleCombos ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRatesScore") ) { return ::hx::Val( getRatesScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { return ::hx::Val( fuckingVolume ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { return ::hx::Val( allowedToCheer ); }
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { return ::hx::Val( usedTimeTravel ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { return ::hx::Val( playingDathing ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { return ::hx::Val( currentLuaIndex ); }
		if (HX_FIELD_EQ(inName,"findByTimeIndex") ) { return ::hx::Val( findByTimeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundVideo") ) { return ::hx::Val( backgroundVideo_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"judgementCounter") ) { return ::hx::Val( judgementCounter ); }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { return ::hx::Val( pastScrollChanges ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"appearStaticArrows") ) { return ::hx::Val( appearStaticArrows_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { return ::hx::Val( kadeEngineWatermark ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { return ::hx::Val( laneunderlayOpponent ); }
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { outValue = ( sm ); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { outValue = ( isSM ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { outValue = ( Stage ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"inDaPlay") ) { outValue = ( inDaPlay ); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { outValue = ( pathToSm ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { outValue = ( weekScore ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { outValue = ( inResults ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"currentSong") ) { outValue = ( currentSong ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { outValue = ( webmHandler ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { outValue = ( campaignBads ); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { outValue = ( stageTesting ); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { outValue = ( highestCombo ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { outValue = ( campaignSicks ); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { outValue = ( campaignGoods ); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { outValue = ( campaignShits ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteskinSprite") ) { outValue = ( noteskinSprite ); return true; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { outValue = ( songMultiplier ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"noteskinPixelSprite") ) { outValue = ( noteskinPixelSprite ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"noteskinPixelSpriteEnds") ) { outValue = ( noteskinPixelSpriteEnds ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTo") ) { skipTo=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danced") ) { danced=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camNotes") ) { camNotes=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { isSMFile=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { idleBeat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"needSkip") ) { needSkip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipText") ) { skipText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useVideo") ) { useVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { cannotDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { altSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"randomVar") ) { randomVar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { saveJudge=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayAna") ) { replayAna=inValue.Cast<  ::Analysis >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { idleToBeat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipActive") ) { skipActive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { dataSuffix=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doAnything") ) { doAnything=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { stopUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camSustains") ) { camSustains=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { videoSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { cleanedSong=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedBotplay") ) { addedBotplay=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { visibleNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { laneunderlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { forcedToIdle=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { closestNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousRate") ) { previousRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { removedVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { visibleCombos=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { fuckingVolume=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { allowedToCheer=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { usedTimeTravel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { playingDathing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { currentLuaIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"judgementCounter") ) { judgementCounter=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { pastScrollChanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { kadeEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { laneunderlayOpponent=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { sm=ioValue.Cast<  ::smTools::SMFile >(); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { isSM=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=ioValue.Cast<  ::Stage >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"inDaPlay") ) { inDaPlay=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { pathToSm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { weekScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { inResults=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"currentSong") ) { currentSong=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { webmHandler=ioValue.Cast<  ::WebmHandler >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { campaignBads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { stageTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { highestCombo=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { campaignSicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { campaignGoods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { campaignShits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteskinSprite") ) { noteskinSprite=ioValue.Cast<  ::flixel::graphics::frames::FlxAtlasFrames >(); return true; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { songMultiplier=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"noteskinPixelSprite") ) { noteskinPixelSprite=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"noteskinPixelSpriteEnds") ) { noteskinPixelSpriteEnds=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("visibleCombos",77,ea,17,26));
	outFields->push(HX_("addedBotplay",9b,66,6f,1d));
	outFields->push(HX_("visibleNotes",6f,f6,4f,15));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("kadeEngineWatermark",ab,82,ba,66));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("laneunderlay",38,48,63,db));
	outFields->push(HX_("laneunderlayOpponent",f5,b5,24,53));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camSustains",9f,69,a2,15));
	outFields->push(HX_("camNotes",b2,c1,02,a8));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("cannotDie",fd,a9,4e,4f));
	outFields->push(HX_("isSMFile",a0,bf,e3,d7));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("idleToBeat",c5,ee,79,79));
	outFields->push(HX_("idleBeat",aa,ce,03,36));
	outFields->push(HX_("forcedToIdle",28,1b,86,c6));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("allowedToCheer",ca,12,31,a1));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("altSuffix",da,14,b5,b7));
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("judgementCounter",c7,fa,f4,d2));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("needSkip",f5,99,f0,28));
	outFields->push(HX_("skipActive",a5,35,4a,7e));
	outFields->push(HX_("skipText",cc,ba,4e,c3));
	outFields->push(HX_("skipTo",da,3d,a7,dc));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("usedTimeTravel",a4,7d,1d,70));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("randomVar",a4,58,4f,a7));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("saveJudge",1a,b7,c8,e4));
	outFields->push(HX_("replayAna",ed,7d,61,0a));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("dataSuffix",9b,a8,47,88));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("closestNotes",28,4f,02,c1));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("doAnything",2d,8c,83,68));
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("previousRate",b7,22,46,f2));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("stopUpdate",ab,d7,b4,b0));
	outFields->push(HX_("removedVideo",bb,c0,72,00));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("pastScrollChanges",44,1c,82,6e));
	outFields->push(HX_("currentLuaIndex",93,2f,c9,10));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("fuckingVolume",c5,2f,0e,74));
	outFields->push(HX_("useVideo",b4,76,67,fe));
	outFields->push(HX_("playingDathing",83,ed,1f,d5));
	outFields->push(HX_("videoSprite",e0,72,3d,3c));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("danced",d1,49,8f,1e));
	outFields->push(HX_("cleanedSong",1d,82,51,e6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleCombos),HX_("visibleCombos",77,ea,17,26)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,addedBotplay),HX_("addedBotplay",9b,66,6f,1d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleNotes),HX_("visibleNotes",6f,f6,4f,15)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,kadeEngineWatermark),HX_("kadeEngineWatermark",ab,82,ba,66)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,laneunderlay),HX_("laneunderlay",38,48,63,db)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,laneunderlayOpponent),HX_("laneunderlayOpponent",f5,b5,24,53)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camSustains),HX_("camSustains",9f,69,a2,15)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camNotes),HX_("camNotes",b2,c1,02,a8)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cannotDie),HX_("cannotDie",fd,a9,4e,4f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isSMFile),HX_("isSMFile",a0,bf,e3,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,idleToBeat),HX_("idleToBeat",c5,ee,79,79)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,idleBeat),HX_("idleBeat",aa,ce,03,36)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,forcedToIdle),HX_("forcedToIdle",28,1b,86,c6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToCheer),HX_("allowedToCheer",ca,12,31,a1)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsString,(int)offsetof(PlayState_obj,altSuffix),HX_("altSuffix",da,14,b5,b7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,judgementCounter),HX_("judgementCounter",c7,fa,f4,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,needSkip),HX_("needSkip",f5,99,f0,28)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipActive),HX_("skipActive",a5,35,4a,7e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,skipText),HX_("skipText",cc,ba,4e,c3)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,skipTo),HX_("skipTo",da,3d,a7,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,usedTimeTravel),HX_("usedTimeTravel",a4,7d,1d,70)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(PlayState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,randomVar),HX_("randomVar",a4,58,4f,a7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,saveJudge),HX_("saveJudge",1a,b7,c8,e4)},
	{::hx::fsObject /*  ::Analysis */ ,(int)offsetof(PlayState_obj,replayAna),HX_("replayAna",ed,7d,61,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataSuffix),HX_("dataSuffix",9b,a8,47,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,closestNotes),HX_("closestNotes",28,4f,02,c1)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,doAnything),HX_("doAnything",2d,8c,83,68)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,previousRate),HX_("previousRate",b7,22,46,f2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,stopUpdate),HX_("stopUpdate",ab,d7,b4,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,removedVideo),HX_("removedVideo",bb,c0,72,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,pastScrollChanges),HX_("pastScrollChanges",44,1c,82,6e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentLuaIndex),HX_("currentLuaIndex",93,2f,c9,10)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,fuckingVolume),HX_("fuckingVolume",c5,2f,0e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,useVideo),HX_("useVideo",b4,76,67,fe)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,playingDathing),HX_("playingDathing",83,ed,1f,d5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,videoSprite),HX_("videoSprite",e0,72,3d,3c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,danced),HX_("danced",d1,49,8f,1e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,cleanedSong),HX_("cleanedSong",1d,82,51,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::weekScore,HX_("weekScore",be,2e,4d,db)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxAtlasFrames */ ,(void *) &PlayState_obj::noteskinSprite,HX_("noteskinSprite",d4,1c,dd,5f)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &PlayState_obj::noteskinPixelSprite,HX_("noteskinPixelSprite",fc,2f,73,52)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &PlayState_obj::noteskinPixelSpriteEnds,HX_("noteskinPixelSpriteEnds",54,66,20,24)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsBool,(void *) &PlayState_obj::inResults,HX_("inResults",91,9b,59,51)},
	{::hx::fsBool,(void *) &PlayState_obj::inDaPlay,HX_("inDaPlay",d6,fd,3f,93)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsBool,(void *) &PlayState_obj::isSM,HX_("isSM",04,f3,be,45)},
	{::hx::fsObject /*  ::smTools::SMFile */ ,(void *) &PlayState_obj::sm,HX_("sm",9a,64,00,00)},
	{::hx::fsString,(void *) &PlayState_obj::pathToSm,HX_("pathToSm",3a,8b,a0,42)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignSicks,HX_("campaignSicks",c5,48,c4,0b)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignGoods,HX_("campaignGoods",66,af,f5,26)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignBads,HX_("campaignBads",3e,f6,cb,d5)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignShits,HX_("campaignShits",83,a7,1f,0b)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsString,(void *) &PlayState_obj::currentSong,HX_("currentSong",ae,fc,e9,84)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsBool,(void *) &PlayState_obj::stageTesting,HX_("stageTesting",b2,74,2e,c5)},
	{::hx::fsObject /*  ::Stage */ ,(void *) &PlayState_obj::Stage,HX_("Stage",9e,da,38,17)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsInt,(void *) &PlayState_obj::highestCombo,HX_("highestCombo",8a,3b,03,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songMultiplier,HX_("songMultiplier",b6,0b,db,c3)},
	{::hx::fsObject /*  ::WebmHandler */ ,(void *) &PlayState_obj::webmHandler,HX_("webmHandler",71,c7,d0,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("visibleCombos",77,ea,17,26),
	HX_("addedBotplay",9b,66,6f,1d),
	HX_("visibleNotes",6f,f6,4f,15),
	HX_("songLength",9b,3a,8c,fa),
	HX_("kadeEngineWatermark",ab,82,ba,66),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("laneunderlay",38,48,63,db),
	HX_("laneunderlayOpponent",f5,b5,24,53),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camSustains",9f,69,a2,15),
	HX_("camNotes",b2,c1,02,a8),
	HX_("camGame",a1,47,50,cf),
	HX_("cannotDie",fd,a9,4e,4f),
	HX_("isSMFile",a0,bf,e3,d7),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("idleToBeat",c5,ee,79,79),
	HX_("idleBeat",aa,ce,03,36),
	HX_("forcedToIdle",28,1b,86,c6),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("allowedToCheer",ca,12,31,a1),
	HX_("dialogue",18,2d,94,a7),
	HX_("songName",c0,d0,d7,36),
	HX_("altSuffix",da,14,b5,b7),
	HX_("currentSection",ac,7a,6c,6b),
	HX_("fc",3d,59,00,00),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("judgementCounter",c7,fa,f4,d2),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("needSkip",f5,99,f0,28),
	HX_("skipActive",a5,35,4a,7e),
	HX_("skipText",cc,ba,4e,c3),
	HX_("skipTo",da,3d,a7,dc),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("usedTimeTravel",a4,7d,1d,70),
	HX_("camPos",c5,54,7c,b7),
	HX_("randomVar",a4,58,4f,a7),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("saveJudge",1a,b7,c8,e4),
	HX_("replayAna",ed,7d,61,0a),
	HX_("executeModchart",31,4a,80,b8),
	HX_("dataSuffix",9b,a8,47,88),
	HX_("dataColor",d9,f2,4b,90),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("getKey",a9,c2,20,a3),
	HX_("keys",f4,e1,06,47),
	HX_("releaseInput",c3,5c,40,85),
	HX_("closestNotes",28,4f,02,c1),
	HX_("handleInput",42,6f,67,70),
	HX_("songStarted",ec,81,a7,ed),
	HX_("doAnything",2d,8c,83,68),
	HX_("bar",d3,b1,4a,00),
	HX_("previousRate",b7,22,46,f2),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("appearStaticArrows",0d,4c,c7,a0),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("stopUpdate",ab,d7,b4,b0),
	HX_("removedVideo",bb,c0,72,00),
	HX_("currentBPM",26,68,25,c7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("pastScrollChanges",44,1c,82,6e),
	HX_("currentLuaIndex",93,2f,c9,10),
	HX_("update",09,86,05,87),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("getRatesScore",f5,78,f9,44),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("findByTime",9d,3a,9f,3b),
	HX_("findByTimeIndex",35,37,38,0e),
	HX_("fuckingVolume",c5,2f,0e,74),
	HX_("useVideo",b4,76,67,fe),
	HX_("playingDathing",83,ed,1f,d5),
	HX_("videoSprite",e0,72,3d,3c),
	HX_("backgroundVideo",ad,f1,e6,f9),
	HX_("noteMiss",0e,78,8f,57),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("pressArrow",46,fb,e7,02),
	HX_("danced",d1,49,8f,1e),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("cleanedSong",1d,82,51,e6),
	HX_("poggers",e7,c2,a8,25),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinSprite,"noteskinSprite");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinPixelSprite,"noteskinPixelSprite");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinPixelSpriteEnds,"noteskinPixelSpriteEnds");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_MARK_MEMBER_NAME(PlayState_obj::inDaPlay,"inDaPlay");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_MARK_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_MARK_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::currentSong,"currentSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_MARK_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinSprite,"noteskinSprite");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinPixelSprite,"noteskinPixelSprite");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinPixelSpriteEnds,"noteskinPixelSpriteEnds");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inDaPlay,"inDaPlay");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::currentSong,"currentSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_VISIT_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("weekScore",be,2e,4d,db),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("noteskinSprite",d4,1c,dd,5f),
	HX_("noteskinPixelSprite",fc,2f,73,52),
	HX_("noteskinPixelSpriteEnds",54,66,20,24),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("inResults",91,9b,59,51),
	HX_("inDaPlay",d6,fd,3f,93),
	HX_("noteBools",b7,6b,85,f4),
	HX_("isSM",04,f3,be,45),
	HX_("sm",9a,64,00,00),
	HX_("pathToSm",3a,8b,a0,42),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("campaignSicks",c5,48,c4,0b),
	HX_("campaignGoods",66,af,f5,26),
	HX_("campaignBads",3e,f6,cb,d5),
	HX_("campaignShits",83,a7,1f,0b),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("currentSong",ae,fc,e9,84),
	HX_("campaignScore",22,22,d6,07),
	HX_("theFunne",05,d0,55,cd),
	HX_("stageTesting",b2,74,2e,c5),
	HX_("Stage",9e,da,38,17),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("songOffset",48,3d,c4,bb),
	HX_("highestCombo",8a,3b,03,1f),
	HX_("startTime",8f,45,f0,05),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songMultiplier",b6,0b,db,c3),
	HX_("webmHandler",71,c7,d0,f2),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_88_boot)
HXDLIN(  88)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_91_boot)
HXDLIN(  91)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_92_boot)
HXDLIN(  92)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_93_boot)
HXDLIN(  93)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_94_boot)
HXDLIN(  94)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_95_boot)
HXDLIN(  95)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_96_boot)
HXDLIN(  96)		weekScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_97_boot)
HXDLIN(  97)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_98_boot)
HXDLIN(  98)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_99_boot)
HXDLIN(  99)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_100_boot)
HXDLIN( 100)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_117_boot)
HXDLIN( 117)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_118_boot)
HXDLIN( 118)		inResults = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_120_boot)
HXDLIN( 120)		inDaPlay = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_122_boot)
HXDLIN( 122)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_193,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_137_boot)
HXDLIN( 137)		isSM = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_162_boot)
HXDLIN( 162)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_163_boot)
HXDLIN( 163)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_164_boot)
HXDLIN( 164)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_175_boot)
HXDLIN( 175)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_176_boot)
HXDLIN( 176)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_177_boot)
HXDLIN( 177)		campaignSicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_178_boot)
HXDLIN( 178)		campaignGoods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_179_boot)
HXDLIN( 179)		campaignBads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_180_boot)
HXDLIN( 180)		campaignShits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_207_boot)
HXDLIN( 207)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_233_boot)
HXDLIN( 233)		currentSong = HX_("noneYet",50,51,f0,d8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_247_boot)
HXDLIN( 247)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_249_boot)
HXDLIN( 249)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_255_boot)
HXDLIN( 255)		stageTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_263_boot)
HXDLIN( 263)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_264_boot)
HXDLIN( 264)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_266_boot)
HXDLIN( 266)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_267_boot)
HXDLIN( 267)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_273_boot)
HXDLIN( 273)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_282_boot)
HXDLIN( 282)		highestCombo = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_290_boot)
HXDLIN( 290)		startTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1136_boot)
HXDLIN(1136)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1431_boot)
HXDLIN(1431)		songMultiplier = ((Float)1.0);
            	}
}

